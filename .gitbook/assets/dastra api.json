{
  "openapi": "3.0.1",
  "info": {
    "title": "Dastra API",
    "description": "Dastra's public REST API",
    "contact": {
      "name": "Dastra Team",
      "url": "https://www.dastra.eu",
      "email": "contact@dastra.eu"
    },
    "license": {
      "name": "MIT",
      "url": "https://example.com/license"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.dastra.eu",
      "description": "API Path"
    }
  ],
  "paths": {
    "/v1/ws/{workspaceId}/Actors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Get all actors (User inserted in the record of processing activities)",
        "operationId": "Actors_List",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "includeScore",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "countries",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "referencedAs",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ActorReferencedAs"
            }
          },
          {
            "name": "types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ActorType"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActorDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Create a new actor",
        "operationId": "Actors_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActorDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Actors"
        ],
        "operationId": "Actors_DeleteBatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Batch delete using a delete + a body param",
        "operationId": "Actors_BatchPatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Int32ActorDtoBatchPatchDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Int32ActorDtoBatchPatchDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Int32ActorDtoBatchPatchDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Int32ActorDtoBatchPatchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Actors/columns": {
      "get": {
        "tags": [
          "Actors"
        ],
        "operationId": "Actors_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Actors/{id}": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Get a single actor with his id",
        "operationId": "Actors_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Fields to select, leave empty you will catch all the fields (Tags,Attachments,Creator",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActorDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Edit the actor's properties",
        "operationId": "Actors_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Actors"
        ],
        "summary": "Remove the actor with his id",
        "operationId": "Actors_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "patch": {
        "tags": [
          "Actors"
        ],
        "operationId": "Actors_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Actors/dpa/{actorId}/{dataProcessingId}/{format}": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Export the actors as a dpa",
        "operationId": "Actors_DPA",
        "parameters": [
          {
            "name": "dataProcessingId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "format",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Actors/export/{format}": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Export the actors in any format",
        "operationId": "Actors_Export",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TemplateExportActor"
            }
          },
          {
            "name": "useNativeColumn",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "cols",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ActorQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActorQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Actors/query": {
      "get": {
        "tags": [
          "Actors"
        ],
        "operationId": "Actors_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Areas/{id}": {
      "get": {
        "tags": [
          "Areas"
        ],
        "summary": "Get area by id",
        "operationId": "Areas_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Areas"
        ],
        "summary": "Edit the area's details",
        "operationId": "Areas_Update",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaBaseDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaBaseDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaBaseDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaBaseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Areas"
        ],
        "summary": "Delete area by id",
        "operationId": "Areas_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Areas/columns": {
      "get": {
        "tags": [
          "Areas"
        ],
        "summary": "List columns",
        "operationId": "Areas_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Areas": {
      "get": {
        "tags": [
          "Areas"
        ],
        "summary": "Get all areas related to the workspace (Flatten)\r\n<returns></returns>",
        "operationId": "Areas_List",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Filter by type",
            "schema": {
              "$ref": "#/components/schemas/AreaType"
            }
          },
          {
            "name": "ref",
            "in": "query",
            "description": "Your internal reference filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "Parent identifier to get all child of a specific organizational unit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Areas"
        ],
        "summary": "Post a new area",
        "operationId": "Areas_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaBaseDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaBaseDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaBaseDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaBaseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Areas/hierarchy": {
      "get": {
        "tags": [
          "Areas"
        ],
        "summary": "Fetch the full organizational unit hierarchy",
        "operationId": "Areas_Hierarchy",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaHierarchyDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Areas/sort": {
      "post": {
        "tags": [
          "Areas"
        ],
        "operationId": "Areas_SortOrder",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Int32SortQueryDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Int32SortQueryDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Int32SortQueryDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Int32SortQueryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Areas/{id}/teams": {
      "get": {
        "tags": [
          "Areas"
        ],
        "operationId": "Areas_Teams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Areas"
        ],
        "summary": "Edit areas's teams by id",
        "operationId": "Areas_TeamsUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Areas/import": {
      "post": {
        "tags": [
          "Areas"
        ],
        "operationId": "Areas_AreasImport",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ContentType": {
                    "type": "string"
                  },
                  "ContentDisposition": {
                    "type": "string"
                  },
                  "Headers": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "Length": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string"
                  },
                  "FileName": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "ContentType": {
                  "style": "form"
                },
                "ContentDisposition": {
                  "style": "form"
                },
                "Headers": {
                  "style": "form"
                },
                "Length": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AreaImportModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Areas/query": {
      "get": {
        "tags": [
          "Areas"
        ],
        "operationId": "Areas_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get all linked assets",
        "operationId": "Assets_List",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AssetType"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create a new application",
        "operationId": "Assets_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "operationId": "Assets_DeleteBatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Assets/columns": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get all columns of an asset",
        "operationId": "Assets_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Assets/{id}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get an asset with his id",
        "operationId": "Assets_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Edit an application",
        "operationId": "Assets_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Delete an application",
        "operationId": "Assets_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "patch": {
        "tags": [
          "Assets"
        ],
        "operationId": "Assets_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Assets/query": {
      "get": {
        "tags": [
          "Assets"
        ],
        "operationId": "Assets_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses": {
      "get": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_List",
        "parameters": [
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "states",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AuditResponseState"
              }
            }
          },
          {
            "name": "templateIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "minReadiness",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxReadiness",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "NeedRenew",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "objectType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AuditObjectType"
            }
          },
          {
            "name": "objectId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "respondantIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ownerIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AuditQueryType"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeGraphs",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeTasks",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditResponseLightDtoPagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/columns": {
      "get": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataTableColumn"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/{id}": {
      "get": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filterRespondantQuestions",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_DeleteAuditResponse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/export/{format}": {
      "post": {
        "tags": [
          "AuditResponses"
        ],
        "summary": "Export the records in any format",
        "operationId": "AuditResponses_Export",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/refuse/{id}": {
      "put": {
        "tags": [
          "AuditResponses"
        ],
        "summary": "Refuse audit response",
        "operationId": "AuditResponses_Refuse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/validate/{id}": {
      "put": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_Validate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/update/{id}": {
      "put": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/finalize/{id}": {
      "put": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_Finalize",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseChangeStateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/renew": {
      "post": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_Renew",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseRenewDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseRenewDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseRenewDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseRenewDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/action-plan-generation/{id}": {
      "post": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_GenerateActionPlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateActionPlanDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateActionPlanDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateActionPlanDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateActionPlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/invite/{id}": {
      "put": {
        "tags": [
          "AuditResponses"
        ],
        "summary": "Send the audit invitation",
        "operationId": "AuditResponses_InviteToAuditResponse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseInvitationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseInvitationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseInvitationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseInvitationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/planification": {
      "post": {
        "tags": [
          "AuditResponses"
        ],
        "summary": "Planification post",
        "operationId": "AuditResponses_CreatePlanification",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponsePlanificationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponsePlanificationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponsePlanificationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponsePlanificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditResponsePlanificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/planification/{id}": {
      "put": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_UpdatePlanification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponsePlanificationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponsePlanificationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponsePlanificationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponsePlanificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditResponsePlanificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/cancel/{id}": {
      "put": {
        "tags": [
          "AuditResponses"
        ],
        "summary": "Cancel an audit\r\nNot used, use refuse/{id} instead",
        "operationId": "AuditResponses_CancelAuditResponse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/archive/{id}": {
      "put": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_ArchiveAuditResponse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/restore/{id}": {
      "put": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_RestoreAuditResponse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/matrix/{templateId}": {
      "get": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_GetMatrixAudit",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "states",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AuditResponseState"
              }
            }
          },
          {
            "name": "templateIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "minReadiness",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxReadiness",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "NeedRenew",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "objectType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AuditObjectType"
            }
          },
          {
            "name": "objectId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "respondantIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ownerIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AuditQueryType"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeGraphs",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeTasks",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowLevel",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RowLevel"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditMatrixDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/set-risk/{id}": {
      "put": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_UpdateRisk",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditRiskLevel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditRiskLevel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditRiskLevel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditRiskLevel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/set-state/{id}": {
      "put": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_UpdateState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseStatePayload"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseStatePayload"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseStatePayload"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditResponseStatePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/stats": {
      "get": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_GetStats",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "areas",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditResponseDtoPagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditResponses/query": {
      "get": {
        "tags": [
          "AuditResponses"
        ],
        "operationId": "AuditResponses_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditTemplates": {
      "get": {
        "tags": [
          "AuditTemplates"
        ],
        "summary": "Search for an audit template (paginated list)",
        "operationId": "AuditTemplates_List",
        "parameters": [
          {
            "name": "includeRevisions",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ObjectType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AuditObjectType"
            }
          },
          {
            "name": "Types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AuditTemplateType"
              }
            }
          },
          {
            "name": "Q",
            "in": "query",
            "description": "Full text query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditTemplateLightDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AuditTemplates"
        ],
        "operationId": "AuditTemplates_Create",
        "parameters": [
          {
            "name": "isContribution",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditTemplates/columns": {
      "get": {
        "tags": [
          "AuditTemplates"
        ],
        "operationId": "AuditTemplates_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataTableColumn"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditTemplates/{id}": {
      "get": {
        "tags": [
          "AuditTemplates"
        ],
        "summary": "Get a unique audit template",
        "operationId": "AuditTemplates_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditTemplateDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AuditTemplates"
        ],
        "operationId": "AuditTemplates_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditTemplateDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AuditTemplates"
        ],
        "summary": "Remove a specified template",
        "operationId": "AuditTemplates_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditTemplates/pin/{id}": {
      "post": {
        "tags": [
          "AuditTemplates"
        ],
        "operationId": "AuditTemplates_Pin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditTemplates/unpin/{id}": {
      "post": {
        "tags": [
          "AuditTemplates"
        ],
        "operationId": "AuditTemplates_UnPin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditTemplates/new-version/{id}": {
      "post": {
        "tags": [
          "AuditTemplates"
        ],
        "operationId": "AuditTemplates_CreateVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditTemplates/duplicate/{id}": {
      "post": {
        "tags": [
          "AuditTemplates"
        ],
        "summary": "Replicate a specified template",
        "operationId": "AuditTemplates_Replicate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditTemplates/generate-template": {
      "post": {
        "tags": [
          "AuditTemplates"
        ],
        "summary": "Generates a specified template from the library",
        "operationId": "AuditTemplates_ImportOrCombine",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Audit template object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateCombinationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateCombinationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateCombinationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuditTemplateCombinationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditTemplates/export/{format}": {
      "post": {
        "tags": [
          "AuditTemplates"
        ],
        "summary": "Export the records in any format",
        "operationId": "AuditTemplates_Export",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExportAuditTemplateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportAuditTemplateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportAuditTemplateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExportAuditTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/AuditTemplates/query": {
      "get": {
        "tags": [
          "AuditTemplates"
        ],
        "operationId": "AuditTemplates_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/ControlPointResponses": {
      "get": {
        "tags": [
          "ControlPointResponses"
        ],
        "summary": "List all risks",
        "operationId": "ControlPointResponses_List",
        "parameters": [
          {
            "name": "controlPointId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "evaluationId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "current",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ControlPointResponseDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ControlPointResponses"
        ],
        "operationId": "ControlPointResponses_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointResponseDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointResponseDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointResponseDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlPointResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/ControlPointResponses/{id}": {
      "get": {
        "tags": [
          "ControlPointResponses"
        ],
        "summary": "Find a risk by his id",
        "operationId": "ControlPointResponses_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlPointResponseDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ControlPointResponses"
        ],
        "operationId": "ControlPointResponses_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointResponseDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointResponseDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointResponseDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlPointResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ControlPointResponses"
        ],
        "summary": "Delete",
        "operationId": "ControlPointResponses_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/ControlPointResponses/batch": {
      "delete": {
        "tags": [
          "ControlPointResponses"
        ],
        "summary": "Delete",
        "operationId": "ControlPointResponses_DeleteBatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/ControlPointResponses/{id}/download/{fileId}": {
      "get": {
        "tags": [
          "ControlPointResponses"
        ],
        "summary": "Simple doc upload",
        "operationId": "ControlPointResponses_Download",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "Id of the file to download",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "saveAs",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/ControlPoints": {
      "get": {
        "tags": [
          "ControlPoints"
        ],
        "summary": "List all risks",
        "operationId": "ControlPoints_List",
        "parameters": [
          {
            "name": "RiskId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ControlPointType"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ControlPointDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ControlPoints"
        ],
        "operationId": "ControlPoints_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlPointUpdateDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/ControlPoints/columns": {
      "get": {
        "tags": [
          "ControlPoints"
        ],
        "operationId": "ControlPoints_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/ControlPoints/suggested-name": {
      "get": {
        "tags": [
          "ControlPoints"
        ],
        "operationId": "ControlPoints_GetSuggestedName",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/ControlPoints/{id}": {
      "get": {
        "tags": [
          "ControlPoints"
        ],
        "summary": "Find a risk by his id",
        "operationId": "ControlPoints_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlPointDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ControlPoints"
        ],
        "operationId": "ControlPoints_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ControlPointUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlPointUpdateDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ControlPoints"
        ],
        "summary": "Delete",
        "operationId": "ControlPoints_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/ControlPoints/batch": {
      "delete": {
        "tags": [
          "ControlPoints"
        ],
        "summary": "Delete",
        "operationId": "ControlPoints_DeleteBatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/ControlPoints/query": {
      "get": {
        "tags": [
          "ControlPoints"
        ],
        "operationId": "ControlPoints_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataBreachs": {
      "get": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Get the databreach list",
        "operationId": "DataBreachs_List",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "states",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataBreachState"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataBreachType"
              }
            }
          },
          {
            "name": "workflows",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Operators",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataBreachDtoPagedList"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Batch delete using a delete + a body param",
        "operationId": "DataBreachs_BatchPatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GuidDataBreachDtoBatchPatchDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuidDataBreachDtoBatchPatchDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GuidDataBreachDtoBatchPatchDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GuidDataBreachDtoBatchPatchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Data breach creation",
        "operationId": "DataBreachs_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataBreachDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataBreachs/columns": {
      "get": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Fetch data breach columns metadata",
        "operationId": "DataBreachs_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataTableColumn"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataBreachs/{id}": {
      "get": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Find a data breach by his id",
        "operationId": "DataBreachs_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataBreachDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Put a databreach",
        "operationId": "DataBreachs_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataBreachDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Patch an application",
        "operationId": "DataBreachs_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Data breach deletion",
        "operationId": "DataBreachs_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataBreachs/restore/{id}": {
      "post": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Restore a selected data breach",
        "operationId": "DataBreachs_Restore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataBreachs/archive/{id}": {
      "post": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Archive a databreach",
        "operationId": "DataBreachs_Archive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataBreachs/invite/{id}": {
      "post": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Sendinvitation to users",
        "operationId": "DataBreachs_InviteUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of data processing",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachInvitationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachInvitationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachInvitationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachInvitationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataBreachDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataBreachs/workflow": {
      "post": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Switching the current state of the data breach",
        "operationId": "DataBreachs_UpdateWorkflow",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GuidWorkflowUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuidWorkflowUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GuidWorkflowUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GuidWorkflowUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataBreachs/export/{format}": {
      "post": {
        "tags": [
          "DataBreachs"
        ],
        "summary": "Export the records in any format",
        "operationId": "DataBreachs_Export",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "description": "Format",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Query object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachExportQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachExportQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachExportQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataBreachExportQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataBreachs/query": {
      "get": {
        "tags": [
          "DataBreachs"
        ],
        "operationId": "DataBreachs_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataFields": {
      "get": {
        "tags": [
          "DataFields"
        ],
        "summary": "List data fields",
        "operationId": "DataFields_List",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cats",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersonalDataCategory"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GenericDataType"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataFieldDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataFields"
        ],
        "summary": "Create a field",
        "operationId": "DataFields_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataFieldDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataFieldDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataFieldDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataFieldDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataFieldDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataFields/columns": {
      "get": {
        "tags": [
          "DataFields"
        ],
        "summary": "List columns",
        "operationId": "DataFields_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataFields/{id}": {
      "get": {
        "tags": [
          "DataFields"
        ],
        "summary": "Find a datafield",
        "operationId": "DataFields_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataFieldDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DataFields"
        ],
        "summary": "Update a data field",
        "operationId": "DataFields_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataFieldDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataFieldDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataFieldDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataFieldDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataFieldDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataFields"
        ],
        "summary": "Delete by id",
        "operationId": "DataFields_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataFieldDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DataFields"
        ],
        "summary": "Patch a data field",
        "operationId": "DataFields_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataFields/query": {
      "get": {
        "tags": [
          "DataFields"
        ],
        "operationId": "DataFields_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessingRelationships/{dataProcessingId}": {
      "get": {
        "tags": [
          "DataProcessingRelationships"
        ],
        "summary": "Get data treatment by id",
        "operationId": "DataProcessingRelationships_List",
        "parameters": [
          {
            "name": "dataProcessingId",
            "in": "path",
            "description": "Id treatment",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataProcessingRelationShipDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessingRelationships/{id}": {
      "post": {
        "tags": [
          "DataProcessingRelationships"
        ],
        "summary": "Saving or updating a datatreatment",
        "operationId": "DataProcessingRelationships_Create",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingRelationShipDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingRelationShipDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingRelationShipDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingRelationShipDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingRelationShipDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataProcessingRelationships"
        ],
        "operationId": "DataProcessingRelationships_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/{id}": {
      "get": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Get data processing record by id",
        "operationId": "DataProcessings_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id treatment",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Field selection: Stakeholders...",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Saving or updating a data processing record",
        "operationId": "DataProcessings_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Patching a data processing with his id",
        "operationId": "DataProcessings_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/tree": {
      "get": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Get data treatments (Paginated)",
        "operationId": "DataProcessings_Tree",
        "parameters": [
          {
            "name": "dataSetId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actorId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stakeholderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recipientId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "securityMeasureId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workflows",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "countries",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "states",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataProcessingState"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Todo : convert to type non array param",
            "schema": {
              "$ref": "#/components/schemas/ProcessingType"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingTreeDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings": {
      "get": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Get data treatments (Paginated)",
        "operationId": "DataProcessings_List",
        "parameters": [
          {
            "name": "dataSetId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actorId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stakeholderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recipientId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "securityMeasureId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workflows",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "countries",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "states",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataProcessingState"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Todo : convert to type non array param",
            "schema": {
              "$ref": "#/components/schemas/ProcessingType"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Creating a record of processing",
        "operationId": "DataProcessings_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingCreationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingCreationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingCreationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingCreationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Batch delete using a delete + a body param",
        "operationId": "DataProcessings_BatchPatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GuidDataProcessingUpdateDtoBatchPatchDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuidDataProcessingUpdateDtoBatchPatchDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GuidDataProcessingUpdateDtoBatchPatchDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GuidDataProcessingUpdateDtoBatchPatchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Batch delete using a delete + a body param",
        "operationId": "DataProcessings_DeleteBatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/nodes": {
      "get": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Get data treatments (Paginated)",
        "operationId": "DataProcessings_Nodes",
        "parameters": [
          {
            "name": "dataSetId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actorId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stakeholderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recipientId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "securityMeasureId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workflows",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "countries",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "states",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataProcessingState"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Todo : convert to type non array param",
            "schema": {
              "$ref": "#/components/schemas/ProcessingType"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordNodes"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/insights": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_Insights",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgressionDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/restore-history": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_RestoreHistory",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/columns": {
      "get": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataTableColumn"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/invite/{id}": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Sendinvitation to users",
        "operationId": "DataProcessings_InviteUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of data processing",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingInvitationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingInvitationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingInvitationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingInvitationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/set-state/{id}": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_SetState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingSetStateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingSetStateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingSetStateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingSetStateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/workflow": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Switching the current state",
        "operationId": "DataProcessings_SetWorkflowStep",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GuidWorkflowUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuidWorkflowUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GuidWorkflowUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GuidWorkflowUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuidWorkflowUpdateDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/{id}/duplicate": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Duplicate a data treatment object",
        "operationId": "DataProcessings_Duplicate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/archive": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Batch delete using a delete + a body param",
        "operationId": "DataProcessings_BatchArchive",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/rebuild-indicators": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_RebuildIndicators",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/archive/{id}": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Register insights",
        "operationId": "DataProcessings_Archive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/restore": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "",
        "operationId": "DataProcessings_BatchRestore",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/restore/{id}": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "registerInsights\r\n            DataTreatment Archiving",
        "operationId": "DataProcessings_Restore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/stats": {
      "get": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_Stats",
        "parameters": [
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingStatsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/dashboard": {
      "get": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Dashboard",
        "operationId": "DataProcessings_Dashboard",
        "parameters": [
          {
            "name": "areaId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/ProcessingType"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProcessingDashboardDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/export/{format}": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Export the records in any format",
        "operationId": "DataProcessings_Export",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "name": "template",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TemplateExportProcessing"
            }
          },
          {
            "name": "groupByAreas",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "useNativeColumn",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "treeView",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "cols",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataProcessingQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/purposes/{id}": {
      "get": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_ListPurposes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurposeDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/recipients/batch": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "summary": "Add to batch",
        "operationId": "DataProcessings_AddRecipientBatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDataProcessingBatchDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDataProcessingBatchDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDataProcessingBatchDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDataProcessingBatchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/recipients/delete/batch": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_RemoveRecipient",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDataProcessingDeleteBatchDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDataProcessingDeleteBatchDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDataProcessingDeleteBatchDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActorDataProcessingDeleteBatchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/recipients/{actorId}": {
      "get": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_GetRecipients",
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataProcessingActorCompleteDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/query": {
      "get": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "includeArchived",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataProcessings/import/json": {
      "post": {
        "tags": [
          "DataProcessings"
        ],
        "operationId": "DataProcessings_ImportJson",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "areaId": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "isContribution": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                },
                "areaId": {
                  "style": "form"
                },
                "isContribution": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReplicationResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataRetentionRules": {
      "get": {
        "tags": [
          "DataRetentionRules"
        ],
        "summary": "List datasets",
        "operationId": "DataRetentionRules_List",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "dataFieldId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetentionRuleDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataRetentionRules"
        ],
        "summary": "Create a dataset",
        "operationId": "DataRetentionRules_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataRetentionRuleUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataRetentionRuleUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataRetentionRuleUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataRetentionRuleUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetentionRuleDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataRetentionRules/columns": {
      "get": {
        "tags": [
          "DataRetentionRules"
        ],
        "operationId": "DataRetentionRules_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataRetentionRules/{id}": {
      "get": {
        "tags": [
          "DataRetentionRules"
        ],
        "summary": "Get a dataset",
        "operationId": "DataRetentionRules_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetentionRuleDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DataRetentionRules"
        ],
        "summary": "Edit a dataset",
        "operationId": "DataRetentionRules_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataRetentionRuleUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataRetentionRuleUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataRetentionRuleUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataRetentionRuleUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetentionRuleDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DataRetentionRules"
        ],
        "summary": "Patch a data field",
        "operationId": "DataRetentionRules_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "DataRetentionRules"
        ],
        "summary": "Delete a dataset",
        "operationId": "DataRetentionRules_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetentionRuleDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataRetentionRules/query": {
      "get": {
        "tags": [
          "DataRetentionRules"
        ],
        "operationId": "DataRetentionRules_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectAttachments/{dataSubjectRequestId}": {
      "post": {
        "tags": [
          "DataSubjectAttachments"
        ],
        "summary": "Upload an attachment to the audits",
        "operationId": "DataSubjectAttachments_UploadAttachment",
        "parameters": [
          {
            "name": "dataSubjectRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubjectAttachmentDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectAttachments/{dataSubjectRequestId}/{fileId}": {
      "delete": {
        "tags": [
          "DataSubjectAttachments"
        ],
        "summary": "Remove an attachment",
        "operationId": "DataSubjectAttachments_RemoveAttachment",
        "parameters": [
          {
            "name": "dataSubjectRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectAttachments/{dataSubjectRequestId}/purge": {
      "post": {
        "tags": [
          "DataSubjectAttachments"
        ],
        "summary": "Remove an attachment",
        "operationId": "DataSubjectAttachments_PurgeAttachments",
        "parameters": [
          {
            "name": "dataSubjectRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectAttachments/{id}/download/{fileId}": {
      "get": {
        "tags": [
          "DataSubjectAttachments"
        ],
        "summary": "Simple doc upload",
        "operationId": "DataSubjectAttachments_Download",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "Id of the file to download",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "saveAs",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectMessages": {
      "get": {
        "tags": [
          "DataSubjectMessages"
        ],
        "summary": "Customer request",
        "operationId": "DataSubjectMessages_List",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSubjectRequestId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "End date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Specific userId (optional)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubjectMessageDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataSubjectMessages"
        ],
        "operationId": "DataSubjectMessages_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectMessageCreationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectMessageCreationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectMessageCreationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectMessageCreationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectMessages/{id}": {
      "get": {
        "tags": [
          "DataSubjectMessages"
        ],
        "operationId": "DataSubjectMessages_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "DataSubjectMessages"
        ],
        "summary": "Delete customer request",
        "operationId": "DataSubjectMessages_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectMessages/download/{id}": {
      "get": {
        "tags": [
          "DataSubjectMessages"
        ],
        "summary": "Simple doc upload",
        "operationId": "DataSubjectMessages_DownloadFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "saveAs",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectMessages/attachments/{id}": {
      "delete": {
        "tags": [
          "DataSubjectMessages"
        ],
        "summary": "Remove attachment linked to the request",
        "operationId": "DataSubjectMessages_DeleteAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequestProcessings/{dataSubjectRequestId}": {
      "get": {
        "tags": [
          "DataSubjectRequestProcessings"
        ],
        "summary": "Data subject request list",
        "operationId": "DataSubjectRequestProcessings_List",
        "parameters": [
          {
            "name": "dataSubjectRequestId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "DataSubjectRequestProcessings"
        ],
        "summary": "Delete a data subject",
        "operationId": "DataSubjectRequestProcessings_Delete",
        "parameters": [
          {
            "name": "dataSubjectRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectDataProcessingSetStateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectDataProcessingSetStateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectDataProcessingSetStateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectDataProcessingSetStateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequestProcessings/{dataSubjectRequestId}/{state}": {
      "post": {
        "tags": [
          "DataSubjectRequestProcessings"
        ],
        "summary": "Create a new data subject request",
        "operationId": "DataSubjectRequestProcessings_SetState",
        "parameters": [
          {
            "name": "dataSubjectRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "state",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DataSubjectRequestDataProcessingState"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectDataProcessingSetStateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectDataProcessingSetStateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectDataProcessingSetStateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectDataProcessingSetStateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequestProcessings/notification/{dataSubjectRequestId}": {
      "post": {
        "tags": [
          "DataSubjectRequestProcessings"
        ],
        "summary": "Create a new data subject request",
        "operationId": "DataSubjectRequestProcessings_SendNotifications",
        "parameters": [
          {
            "name": "dataSubjectRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests/{id}": {
      "get": {
        "tags": [
          "DataSubjectRequests"
        ],
        "summary": "Get an existing user request by id",
        "operationId": "DataSubjectRequests_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User request id (digits)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubjectRequestDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DataSubjectRequests"
        ],
        "summary": "Patch an application",
        "operationId": "DataSubjectRequests_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "DataSubjectRequests"
        ],
        "summary": "Edit a user request",
        "operationId": "DataSubjectRequests_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubjectRequestDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataSubjectRequests"
        ],
        "summary": "Delete a data subject",
        "operationId": "DataSubjectRequests_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests": {
      "get": {
        "tags": [
          "DataSubjectRequests"
        ],
        "summary": "User request list",
        "operationId": "DataSubjectRequests_List",
        "parameters": [
          {
            "name": "overtaking",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflows",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "states",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataSubjectRequestState"
              }
            }
          },
          {
            "name": "purposes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataSubjectPurposeType"
              }
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "users",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubjectRequestDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataSubjectRequests"
        ],
        "summary": "Create a new data subject request",
        "operationId": "DataSubjectRequests_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubjectRequestLightDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests/processing/{id}": {
      "put": {
        "tags": [
          "DataSubjectRequests"
        ],
        "summary": "Switching the identity validation state",
        "operationId": "DataSubjectRequests_SetProcessingState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDataProcessingDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDataProcessingDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDataProcessingDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectRequestDataProcessingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests/set-identity-validation/{id}": {
      "put": {
        "tags": [
          "DataSubjectRequests"
        ],
        "summary": "Switching the identity validation state",
        "operationId": "DataSubjectRequests_SetIdentityValidation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetIdentityValidationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetIdentityValidationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetIdentityValidationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetIdentityValidationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests/workflow": {
      "post": {
        "tags": [
          "DataSubjectRequests"
        ],
        "summary": "Switching the current state",
        "operationId": "DataSubjectRequests_UpdateWorkflow",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Int32WorkflowUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Int32WorkflowUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Int32WorkflowUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Int32WorkflowUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests/columns": {
      "get": {
        "tags": [
          "DataSubjectRequests"
        ],
        "operationId": "DataSubjectRequests_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests/archive/{id}": {
      "post": {
        "tags": [
          "DataSubjectRequests"
        ],
        "summary": "Archive an existing user request by id\r\nIt set the current state of the request to \"Archived\" state",
        "operationId": "DataSubjectRequests_Archive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests/restore/{id}": {
      "post": {
        "tags": [
          "DataSubjectRequests"
        ],
        "operationId": "DataSubjectRequests_Restore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests/export/{format}": {
      "post": {
        "tags": [
          "DataSubjectRequests"
        ],
        "summary": "Export the records in any format",
        "operationId": "DataSubjectRequests_Export",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectExportQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectExportQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectExportQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataSubjectExportQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubjectRequestDtoPagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests/stats": {
      "get": {
        "tags": [
          "DataSubjectRequests"
        ],
        "operationId": "DataSubjectRequests_Stats",
        "parameters": [
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubjectStatsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests/dashboard": {
      "get": {
        "tags": [
          "DataSubjectRequests"
        ],
        "operationId": "DataSubjectRequests_Dashboard",
        "parameters": [
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSubjectStatsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataSubjectRequests/query": {
      "get": {
        "tags": [
          "DataSubjectRequests"
        ],
        "operationId": "DataSubjectRequests_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataTransfers/{id}": {
      "put": {
        "tags": [
          "DataTransfers"
        ],
        "operationId": "DataTransfers_Update",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransferDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransferDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataTransfers/columns": {
      "get": {
        "tags": [
          "DataTransfers"
        ],
        "operationId": "DataTransfers_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/DataTransfers/grouped": {
      "get": {
        "tags": [
          "DataTransfers"
        ],
        "summary": "Get data treatments (Paginated)",
        "operationId": "DataTransfers_GetGrouped",
        "parameters": [
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "states",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DataProcessingState"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ProcessingType"
              }
            }
          },
          {
            "name": "filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countries",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataTransfersDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/GenericRelationships": {
      "get": {
        "tags": [
          "GenericRelationships"
        ],
        "summary": "List all data",
        "operationId": "GenericRelationships_List",
        "parameters": [
          {
            "name": "objectIds",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "objectType",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/RelationShipObjectType"
            }
          },
          {
            "name": "targetType",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/RelationShipObjectType"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenericRelationShipLinkedObjectDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "GenericRelationships"
        ],
        "summary": "Saving or updating a datatreatment",
        "operationId": "GenericRelationships_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GenericRelationShipCreationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericRelationShipCreationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericRelationShipCreationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GenericRelationShipCreationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/GenericRelationships/{id}": {
      "put": {
        "tags": [
          "GenericRelationships"
        ],
        "summary": "Saving or updating a datatreatment",
        "operationId": "GenericRelationships_Update",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GenericRelationShipLinkedObjectDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericRelationShipLinkedObjectDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericRelationShipLinkedObjectDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GenericRelationShipLinkedObjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "GenericRelationships"
        ],
        "operationId": "GenericRelationships_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Iterations": {
      "get": {
        "tags": [
          "Iterations"
        ],
        "operationId": "Iterations_List",
        "parameters": [
          {
            "name": "past",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "future",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "asc",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IterationDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Iterations"
        ],
        "operationId": "Iterations_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/IterationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IterationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IterationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IterationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IterationDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Iterations/{id}": {
      "get": {
        "tags": [
          "Iterations"
        ],
        "operationId": "Iterations_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IterationDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Iterations"
        ],
        "operationId": "Iterations_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/IterationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IterationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IterationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IterationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Iterations"
        ],
        "summary": "Delete an iteration",
        "operationId": "Iterations_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Iterations/query": {
      "get": {
        "tags": [
          "Iterations"
        ],
        "operationId": "Iterations_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Logs": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Get logs",
        "operationId": "Logs_List",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "typeQuery",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TypeQuery"
            }
          },
          {
            "name": "userExcluded",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "onlyRecipients",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LogObjectType"
            }
          },
          {
            "name": "channels",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NotificationChannel"
              }
            }
          },
          {
            "name": "refId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Logs/history": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Log history for a specific user",
        "operationId": "Logs_History",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogHistoryItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Logs/export": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Download logs as csv",
        "operationId": "Logs_Export",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "typeQuery",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TypeQuery"
            }
          },
          {
            "name": "userExcluded",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "onlyRecipients",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LogObjectType"
            }
          },
          {
            "name": "channels",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NotificationChannel"
              }
            }
          },
          {
            "name": "refId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Logs/view": {
      "post": {
        "tags": [
          "Logs"
        ],
        "operationId": "Logs_View",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Logs/view-all": {
      "post": {
        "tags": [
          "Logs"
        ],
        "operationId": "Logs_ViewAll",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Logs/{id}": {
      "delete": {
        "tags": [
          "Logs"
        ],
        "operationId": "Logs_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "Logs"
        ],
        "operationId": "Logs_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a projects",
        "operationId": "Projects_List",
        "parameters": [
          {
            "name": "archived",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Post a project",
        "operationId": "Projects_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Projects/{id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a project",
        "operationId": "Projects_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "operationId": "Projects_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Projects/archive/{id}": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Archive a project",
        "operationId": "Projects_ArchiveProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Projects/query": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "Projects_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskAssets": {
      "get": {
        "tags": [
          "RiskAssets"
        ],
        "operationId": "RiskAssets_GetMostRisky",
        "parameters": [
          {
            "name": "objectType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RiskObjectType"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskAssetDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskAssets/columns": {
      "get": {
        "tags": [
          "RiskAssets"
        ],
        "operationId": "RiskAssets_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskAssets/export/{format}": {
      "post": {
        "tags": [
          "RiskAssets"
        ],
        "operationId": "RiskAssets_Export",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRiskAssetFilter"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRiskAssetFilter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRiskAssetFilter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRiskAssetFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskCategories": {
      "get": {
        "tags": [
          "RiskCategories"
        ],
        "summary": "List all risks",
        "operationId": "RiskCategories_List",
        "parameters": [
          {
            "name": "dataProcessings",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "categories",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "controlPointId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskCategoryDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RiskCategories"
        ],
        "operationId": "RiskCategories_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskCategoryDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskCategoryDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskCategoryDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskCategoryDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskCategories/columns": {
      "get": {
        "tags": [
          "RiskCategories"
        ],
        "operationId": "RiskCategories_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskCategories/{id}": {
      "get": {
        "tags": [
          "RiskCategories"
        ],
        "summary": "Find a risk by his id",
        "operationId": "RiskCategories_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskCategoryDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RiskCategories"
        ],
        "operationId": "RiskCategories_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskCategoryDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskCategoryDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskCategoryDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RiskCategories"
        ],
        "operationId": "RiskCategories_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskCategories/query": {
      "get": {
        "tags": [
          "RiskCategories"
        ],
        "operationId": "RiskCategories_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvaluations": {
      "get": {
        "tags": [
          "RiskEvaluations"
        ],
        "summary": "List all risks",
        "operationId": "RiskEvaluations_List",
        "parameters": [
          {
            "name": "states",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RiskEvaluationState"
              }
            }
          },
          {
            "name": "objectType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RiskObjectType"
            }
          },
          {
            "name": "controlPointId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "objectId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "riskIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "catIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskEvaluationDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RiskEvaluations"
        ],
        "operationId": "RiskEvaluations_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskEvaluationUpdateDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvaluations/columns": {
      "get": {
        "tags": [
          "RiskEvaluations"
        ],
        "operationId": "RiskEvaluations_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvaluations/{id}": {
      "get": {
        "tags": [
          "RiskEvaluations"
        ],
        "summary": "Find a risk by his id",
        "operationId": "RiskEvaluations_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskEvaluationDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RiskEvaluations"
        ],
        "operationId": "RiskEvaluations_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskEvaluationUpdateDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RiskEvaluations"
        ],
        "summary": "Delete",
        "operationId": "RiskEvaluations_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvaluations/batch": {
      "delete": {
        "tags": [
          "RiskEvaluations"
        ],
        "summary": "Delete",
        "operationId": "RiskEvaluations_DeleteBatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of id",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvaluations/switch-state/{id}/{state}": {
      "post": {
        "tags": [
          "RiskEvaluations"
        ],
        "summary": "Switch state",
        "operationId": "RiskEvaluations_SwitchState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "state",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RiskEvaluationState"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskEvaluationDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvaluations/stats": {
      "get": {
        "tags": [
          "RiskEvaluations"
        ],
        "operationId": "RiskEvaluations_GetStats",
        "parameters": [
          {
            "name": "objectType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/RiskObjectType"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskIndicators"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvaluations/count/{objectType}/{objectId}": {
      "get": {
        "tags": [
          "RiskEvaluations"
        ],
        "operationId": "RiskEvaluations_Count",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RiskObjectType"
            }
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "areaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvaluations/query": {
      "get": {
        "tags": [
          "RiskEvaluations"
        ],
        "operationId": "RiskEvaluations_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvaluations/export/{format}": {
      "post": {
        "tags": [
          "RiskEvaluations"
        ],
        "summary": "Export the records in any format",
        "operationId": "RiskEvaluations_Export",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "name": "useNativeColumn",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "cols",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEvaluationQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvents": {
      "get": {
        "tags": [
          "RiskEvents"
        ],
        "summary": "List all risks",
        "operationId": "RiskEvents_List",
        "parameters": [
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskEventDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RiskEvents"
        ],
        "operationId": "RiskEvents_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEventDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEventDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEventDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEventDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskEventDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RiskEvents"
        ],
        "operationId": "RiskEvents_DeleteBatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvents/stats": {
      "get": {
        "tags": [
          "RiskEvents"
        ],
        "operationId": "RiskEvents_Stats",
        "parameters": [
          {
            "name": "evaluationId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvents/columns": {
      "get": {
        "tags": [
          "RiskEvents"
        ],
        "operationId": "RiskEvents_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvents/{id}": {
      "get": {
        "tags": [
          "RiskEvents"
        ],
        "summary": "Find a risk by his id",
        "operationId": "RiskEvents_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskEventDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RiskEvents"
        ],
        "operationId": "RiskEvents_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEventDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEventDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEventDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskEventDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RiskEvents"
        ],
        "operationId": "RiskEvents_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskEventDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskEvents/query": {
      "get": {
        "tags": [
          "RiskEvents"
        ],
        "operationId": "RiskEvents_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskSettings": {
      "get": {
        "tags": [
          "RiskSettings"
        ],
        "summary": "List all risks",
        "operationId": "RiskSettings_List",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskSettingsDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RiskSettings"
        ],
        "operationId": "RiskSettings_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskSettingsCreationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskSettingsCreationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskSettingsCreationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskSettingsCreationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskSettingsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskSettings/selected": {
      "get": {
        "tags": [
          "RiskSettings"
        ],
        "summary": "Find a risk by his id",
        "operationId": "RiskSettings_FindSelected",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskSettingsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskSettings/select/{id}": {
      "post": {
        "tags": [
          "RiskSettings"
        ],
        "operationId": "RiskSettings_Select",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskSettings/{id}": {
      "put": {
        "tags": [
          "RiskSettings"
        ],
        "operationId": "RiskSettings_Update",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskSettingsDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskSettingsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskSettingsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskSettingsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RiskSettings"
        ],
        "operationId": "RiskSettings_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskSettingsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskThreats": {
      "get": {
        "tags": [
          "RiskThreats"
        ],
        "summary": "List all threats",
        "operationId": "RiskThreats_List",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskThreatDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RiskThreats"
        ],
        "operationId": "RiskThreats_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskThreatDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskThreatDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskThreatDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskThreatDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskThreatDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskThreats/columns": {
      "get": {
        "tags": [
          "RiskThreats"
        ],
        "operationId": "RiskThreats_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskThreats/{id}": {
      "get": {
        "tags": [
          "RiskThreats"
        ],
        "summary": "Find a risk by his id",
        "operationId": "RiskThreats_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskThreatDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RiskThreats"
        ],
        "operationId": "RiskThreats_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskThreatDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskThreatDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskThreatDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskThreatDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskThreatDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RiskThreats"
        ],
        "summary": "Delete",
        "operationId": "RiskThreats_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskThreats/batch": {
      "delete": {
        "tags": [
          "RiskThreats"
        ],
        "summary": "Delete",
        "operationId": "RiskThreats_DeleteBatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskThreats/query": {
      "get": {
        "tags": [
          "RiskThreats"
        ],
        "operationId": "RiskThreats_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskTypes": {
      "get": {
        "tags": [
          "RiskTypes"
        ],
        "summary": "List all risks",
        "operationId": "RiskTypes_List",
        "parameters": [
          {
            "name": "dataProcessings",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "categories",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "controlPointId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskTypeDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RiskTypes"
        ],
        "operationId": "RiskTypes_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskTypeDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskTypeDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskTypeDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskTypeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskTypeDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskTypes/suggested-name": {
      "get": {
        "tags": [
          "RiskTypes"
        ],
        "operationId": "RiskTypes_GetSuggestedName",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskTypes/tree": {
      "get": {
        "tags": [
          "RiskTypes"
        ],
        "summary": "List all risks by category",
        "operationId": "RiskTypes_Tree",
        "parameters": [
          {
            "name": "dataProcessings",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "categories",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "controlPointId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskCategoryTreeDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskTypes/columns": {
      "get": {
        "tags": [
          "RiskTypes"
        ],
        "operationId": "RiskTypes_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskTypes/{id}": {
      "get": {
        "tags": [
          "RiskTypes"
        ],
        "summary": "Find a risk by his id",
        "operationId": "RiskTypes_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskTypeDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RiskTypes"
        ],
        "operationId": "RiskTypes_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskTypeDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskTypeDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RiskTypeDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RiskTypeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "RiskTypes"
        ],
        "operationId": "RiskTypes_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskTypeDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskTypes/sortorder/{id}/{categoryId}": {
      "post": {
        "tags": [
          "RiskTypes"
        ],
        "operationId": "RiskTypes_ChangeOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/RiskTypes/query": {
      "get": {
        "tags": [
          "RiskTypes"
        ],
        "operationId": "RiskTypes_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/SecurityMeasures": {
      "get": {
        "tags": [
          "SecurityMeasures"
        ],
        "operationId": "SecurityMeasures_List",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SecurityMeasureType"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityMeasureTableDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SecurityMeasures"
        ],
        "summary": "Create a new security measure",
        "operationId": "SecurityMeasures_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityMeasureDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityMeasureDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityMeasureDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityMeasureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityMeasureDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SecurityMeasures"
        ],
        "operationId": "SecurityMeasures_DeleteBatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/SecurityMeasures/columns": {
      "get": {
        "tags": [
          "SecurityMeasures"
        ],
        "summary": "List available column for security measure",
        "operationId": "SecurityMeasures_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataTableColumn"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/SecurityMeasures/{id}": {
      "get": {
        "tags": [
          "SecurityMeasures"
        ],
        "summary": "Get security measure by id",
        "operationId": "SecurityMeasures_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityMeasureDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SecurityMeasures"
        ],
        "summary": "Update an existing security measure",
        "operationId": "SecurityMeasures_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityMeasureDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityMeasureDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityMeasureDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityMeasureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityMeasureDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "SecurityMeasures"
        ],
        "operationId": "SecurityMeasures_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "SecurityMeasures"
        ],
        "summary": "Delete a security measure",
        "operationId": "SecurityMeasures_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/SecurityMeasures/query": {
      "get": {
        "tags": [
          "SecurityMeasures"
        ],
        "operationId": "SecurityMeasures_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Api status",
        "operationId": "Status_Status",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "",
        "operationId": "Status_Me",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/rate-limiting-state": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "The rate limiting state",
        "operationId": "Status_RateLimitingStatus",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get all tags",
        "operationId": "Tags_List",
        "parameters": [
          {
            "name": "asc",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "All tags",
            "schema": {
              "$ref": "#/components/schemas/TagType"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create a tag",
        "operationId": "Tags_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tags/{id}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "Tags_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Edit tag",
        "operationId": "Tags_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete the tag",
        "operationId": "Tags_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tags/query": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "Tags_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/columns": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Columns available for table display",
        "operationId": "Tasks_Columns",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/count": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "operationId": "Tasks_Count",
        "parameters": [
          {
            "name": "objectType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TaskObjectType"
            }
          },
          {
            "name": "objectId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "",
        "operationId": "Tasks_List",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "users",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "objectType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TaskObjectType"
            }
          },
          {
            "name": "objectIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "prios",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Priority"
              }
            }
          },
          {
            "name": "states",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskState"
              }
            }
          },
          {
            "name": "workflows",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "iteration",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "overtaking",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "excludeDone",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeChildren",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Task creation",
        "operationId": "Tasks_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreateUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreateUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreateUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreateUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Batch delete using a delete + a body param",
        "operationId": "Tasks_DeleteBatch",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/grouped": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get tasks grouped by workflow steps",
        "operationId": "Tasks_ListGrouped",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "users",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "objectType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TaskObjectType"
            }
          },
          {
            "name": "objectIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "prios",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Priority"
              }
            }
          },
          {
            "name": "states",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskState"
              }
            }
          },
          {
            "name": "workflows",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "iteration",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "overtaking",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "excludeDone",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeChildren",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupTasksDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/{id}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a single task by id",
        "operationId": "Tasks_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Task update",
        "operationId": "Tasks_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreateUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreateUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreateUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreateUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "",
        "operationId": "Tasks_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "patch": {
        "tags": [
          "Tasks"
        ],
        "operationId": "Tasks_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/{id}/archive": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "",
        "operationId": "Tasks_Archive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivePayload"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivePayload"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivePayload"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/stats": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "operationId": "Tasks_Stats",
        "parameters": [
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "iterationId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/velocity-chart": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "operationId": "Tasks_VelocityChart",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nbIterations",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/cumulative-flow-chart": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "operationId": "Tasks_CumulativeFlowChart",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/task-reporting": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "operationId": "Tasks_Reporting",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "iterationId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "objectId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TaskObjectType"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/burn-down-chart": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "operationId": "Tasks_BurnDownChart",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "iterationId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "objectId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TaskObjectType"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatsDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/sortOrder": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Switching the current state of the element\r\nUsing this system \r\nhttps://stackoverflow.com/questions/398425/maintaining-sort-order-of-database-table-rows",
        "operationId": "Tasks_SortOrder",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Int32SortQueryDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Int32SortQueryDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Int32SortQueryDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Int32SortQueryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/workflow": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Switching the current state of the element",
        "operationId": "Tasks_UpdateWorkflow",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Int32WorkflowUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Int32WorkflowUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Int32WorkflowUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Int32WorkflowUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/workflow-stats": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get the workflow stats",
        "operationId": "Tasks_WorkflowStats",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/export/{format}": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Export the records in any format",
        "operationId": "Tasks_Export",
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExportFormat"
            }
          },
          {
            "name": "useNativeColumn",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "cols",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskExportQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskExportQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskExportQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskExportQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Tasks/query": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "operationId": "Tasks_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a team by id",
        "operationId": "Teams_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update a team",
        "operationId": "Teams_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Delete team",
        "operationId": "Teams_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get all teams (paginated)",
        "operationId": "Teams_List",
        "parameters": [
          {
            "name": "ref",
            "in": "query",
            "description": "Internal reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Full text query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamItemDtoPagedList"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create a new team",
        "operationId": "Teams_Create",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/ws/{workspaceId}/Teams/query": {
      "get": {
        "tags": [
          "Teams"
        ],
        "operationId": "Teams_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TenantUsers/{id}": {
      "get": {
        "tags": [
          "TenantUsers"
        ],
        "summary": "Get a single user details",
        "operationId": "TenantUsers_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TenantUsers"
        ],
        "operationId": "TenantUsers_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TenantUsers/public-profile/{id}": {
      "get": {
        "tags": [
          "TenantUsers"
        ],
        "summary": "Get a single user details",
        "operationId": "TenantUsers_PublicProfile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProfileDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TenantUsers/habilitations/{id}": {
      "get": {
        "tags": [
          "TenantUsers"
        ],
        "summary": "Habilitations",
        "operationId": "TenantUsers_Habilitations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/TenantUsers/query": {
      "get": {
        "tags": [
          "TenantUsers"
        ],
        "operationId": "TenantUsers_DynamicQuery",
        "parameters": [
          {
            "name": "Q",
            "in": "query",
            "description": "Full text search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AreaId",
            "in": "query",
            "description": "Area Id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "description": "Page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Size",
            "in": "query",
            "description": "Size of the recordset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "workspaceId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelectListItemResourcePagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TenantUsers": {
      "get": {
        "tags": [
          "TenantUsers"
        ],
        "summary": "",
        "operationId": "TenantUsers_List",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "Comma separated list of fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDtoPagedList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TenantUsers/count": {
      "get": {
        "tags": [
          "TenantUsers"
        ],
        "operationId": "TenantUsers_Count",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/v1/TenantUsers/owners/{userId}": {
      "post": {
        "tags": [
          "TenantUsers"
        ],
        "summary": "Ajouter ou mettre à jour un propriétaire",
        "operationId": "TenantUsers_AddOrUpdateOwner",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "TenantUsers"
        ],
        "summary": "Remove owner by userId",
        "operationId": "TenantUsers_OwnerDelete",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/TenantUsers/owners": {
      "get": {
        "tags": [
          "TenantUsers"
        ],
        "summary": "Collect the owner list",
        "operationId": "TenantUsers_OwnerList",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/TenantUsers/resetpassword/{userId}": {
      "post": {
        "tags": [
          "TenantUsers"
        ],
        "operationId": "TenantUsers_ResetPassword",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/WebHookUrls": {
      "get": {
        "tags": [
          "WebHookUrls"
        ],
        "summary": "Get all webhooks urls configured in workspace",
        "operationId": "WebHookUrls_List",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebHookUrlDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "WebHookUrls"
        ],
        "summary": "Post a new webhook url",
        "operationId": "WebHookUrls_Create",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookUrlCreationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookUrlCreationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookUrlCreationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookUrlCreationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHookUrlDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WebHookUrls/{id}": {
      "get": {
        "tags": [
          "WebHookUrls"
        ],
        "summary": "Get webhook by id",
        "operationId": "WebHookUrls_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHookUrlDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WebHookUrls"
        ],
        "summary": "Edit webhook url",
        "operationId": "WebHookUrls_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookUrlCreationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookUrlCreationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookUrlCreationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebHookUrlCreationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "WebHookUrls"
        ],
        "summary": "Delete webhook url",
        "operationId": "WebHookUrls_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/WebHookUrls/test/{webhookId}/{evt}": {
      "get": {
        "tags": [
          "WebHookUrls"
        ],
        "operationId": "WebHookUrls_TestSample",
        "parameters": [
          {
            "name": "evt",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NotificationChannel"
            }
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/WebHookUrls/test": {
      "post": {
        "tags": [
          "WebHookUrls"
        ],
        "summary": "For testing a payload request webhook",
        "operationId": "WebHookUrls_Test",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPayload"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPayload"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPayload"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/WorkSpaces/{id}": {
      "get": {
        "tags": [
          "WorkSpaces"
        ],
        "summary": "Get one workspace",
        "operationId": "WorkSpaces_Find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkSpaceDto"
                }
              }
            }
          }
        }
      }
    },
    "/v1/WorkSpaces": {
      "get": {
        "tags": [
          "WorkSpaces"
        ],
        "summary": "Get the workspaces list",
        "operationId": "WorkSpaces_List",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of the result page (default: 20, max 500)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field to sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asc",
            "in": "query",
            "description": "True to sort ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WorkSpaceState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkSpaceListDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessLevel": {
        "enum": [
          "None",
          "Restricted",
          "Full"
        ],
        "type": "string"
      },
      "AccessType": {
        "enum": [
          "None",
          "ManualOrOnDemand",
          "Automatic",
          "NonApplicable"
        ],
        "type": "string"
      },
      "ActorDataProcessingBatchDto": {
        "type": "object",
        "properties": {
          "actorIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "label": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/DataProcessingActorType"
          },
          "recipientType": {
            "$ref": "#/components/schemas/RecipientType"
          },
          "jobTitle": {
            "$ref": "#/components/schemas/JobTitle"
          },
          "dataProcessingId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Data processing batch dto"
      },
      "ActorDataProcessingDeleteBatchDto": {
        "type": "object",
        "properties": {
          "relationshipIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActorDataProcessingLightDto": {
        "type": "object",
        "properties": {
          "recipientType": {
            "$ref": "#/components/schemas/RecipientType"
          },
          "jobTitle": {
            "$ref": "#/components/schemas/JobTitle"
          },
          "type": {
            "$ref": "#/components/schemas/DataProcessingActorType"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "ref": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "riskLevel": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workspaceId": {
            "type": "integer",
            "format": "int32"
          },
          "archived": {
            "type": "boolean"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "processingType": {
            "$ref": "#/components/schemas/ProcessingType"
          }
        },
        "additionalProperties": false
      },
      "ActorDto": {
        "type": "object",
        "properties": {
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActorDataProcessingLightDto"
            },
            "nullable": true
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "dpaSignatureDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nbReferences": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "actorType": {
            "$ref": "#/components/schemas/ActorType"
          },
          "vendorType": {
            "$ref": "#/components/schemas/VendorType"
          },
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "familyName": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 2,
            "type": "string",
            "nullable": true
          },
          "readonly": {
            "type": "boolean"
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "contactName": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "contactPosition": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "immatriculationNumber": {
            "type": "string",
            "nullable": true
          },
          "websiteUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActorDtoJsonPatchDocument": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActorDtoOperation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActorDtoOperation": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActorDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActorDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ActorLightDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "actorType": {
            "$ref": "#/components/schemas/ActorType"
          },
          "vendorType": {
            "$ref": "#/components/schemas/VendorType"
          },
          "accessLevel": {
            "$ref": "#/components/schemas/AccessLevel"
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "familyName": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 2,
            "type": "string",
            "nullable": true
          },
          "readonly": {
            "type": "boolean"
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "contactName": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "contactPosition": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "immatriculationNumber": {
            "type": "string",
            "nullable": true
          },
          "websiteUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActorQuery": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "includeScore": {
            "type": "boolean"
          },
          "q": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "referencedAs": {
            "$ref": "#/components/schemas/ActorReferencedAs"
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActorType"
            },
            "nullable": true
          },
          "select": {
            "type": "string",
            "description": "Comma separated list of fields",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of the result page (default: 20, max 500)",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sortBy": {
            "type": "string",
            "description": "The field to sort",
            "nullable": true
          },
          "asc": {
            "type": "boolean",
            "description": "True to sort ascending"
          },
          "filters": {
            "type": "string",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActorReferencedAs": {
        "enum": [
          "Vendor",
          "DataController",
          "ThirdParty",
          "InternalService",
          "JointController",
          "DataSubject",
          "PublicOrganism",
          "InstitutionalPartner"
        ],
        "type": "string"
      },
      "ActorType": {
        "enum": [
          "Physical",
          "Morale"
        ],
        "type": "string"
      },
      "AdminPermission": {
        "enum": [
          "Content",
          "ConnectAs",
          "RoleAssignation",
          "Feedback",
          "Contact",
          "Tenant",
          "User",
          "Contribution",
          "Log",
          "Partner",
          "PricingPlan"
        ],
        "type": "string"
      },
      "ApplicationState": {
        "enum": [
          "InProduction",
          "InDevelopment",
          "Stopped"
        ],
        "type": "string"
      },
      "ApplicationType": {
        "enum": [
          "Software",
          "WebApp",
          "Saas",
          "Module",
          "Other"
        ],
        "type": "string"
      },
      "ArchivePayload": {
        "type": "object",
        "properties": {
          "archived": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AreaBaseDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/AreaType"
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ref": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          },
          "label": {
            "maxLength": 80,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 3,
            "type": "string",
            "nullable": true
          },
          "immatriculationNumber": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 14,
            "type": "string",
            "nullable": true
          },
          "mailAddress": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "dpo": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "referent": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "representative": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "dataProtectionAuthority": {
            "$ref": "#/components/schemas/DataProtectionAuthorityDto"
          }
        },
        "additionalProperties": false
      },
      "AreaDataProcessingTreeItemDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "treeItemType": {
            "$ref": "#/components/schemas/TreeItemType"
          },
          "folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaDataProcessingTreeItemDto"
            },
            "nullable": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingTreeItemDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "order": {
            "type": "integer",
            "format": "int64"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamDto"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/AreaType"
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ref": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          },
          "label": {
            "maxLength": 80,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 3,
            "type": "string",
            "nullable": true
          },
          "immatriculationNumber": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 14,
            "type": "string",
            "nullable": true
          },
          "mailAddress": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "dpo": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "referent": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "representative": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "dataProtectionAuthority": {
            "$ref": "#/components/schemas/DataProtectionAuthorityDto"
          }
        },
        "additionalProperties": false
      },
      "AreaDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "order": {
            "type": "integer",
            "format": "int64"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaDto"
            },
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamDto"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/AreaType"
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ref": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          },
          "label": {
            "maxLength": 80,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 3,
            "type": "string",
            "nullable": true
          },
          "immatriculationNumber": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 14,
            "type": "string",
            "nullable": true
          },
          "mailAddress": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "dpo": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "referent": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "representative": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "dataProtectionAuthority": {
            "$ref": "#/components/schemas/DataProtectionAuthorityDto"
          }
        },
        "additionalProperties": false
      },
      "AreaDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AreaHierarchyDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaDto"
            },
            "nullable": true
          },
          "nbWorkspaceEntities": {
            "type": "integer",
            "format": "int32"
          },
          "nbEntities": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AreaImportModel": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "maxLength": 80,
            "type": "string",
            "nullable": true
          },
          "label": {
            "maxLength": 80,
            "type": "string"
          },
          "countryCode": {
            "maxLength": 5,
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AreaType"
          },
          "city": {
            "maxLength": 120,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "address": {
            "maxLength": 220,
            "type": "string",
            "nullable": true
          },
          "mailAddress": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 14,
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "immatriculationNumber": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaLightDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AreaType"
          }
        },
        "additionalProperties": false
      },
      "AreaType": {
        "enum": [
          "Entity",
          "Area"
        ],
        "type": "string",
        "description": "Area type => entity"
      },
      "AssetDto": {
        "required": [
          "label",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "maxLength": 655,
            "type": "string"
          },
          "address": {
            "maxLength": 400,
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 2,
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 155,
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AssetType"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "applicationState": {
            "$ref": "#/components/schemas/ApplicationState"
          },
          "applicationType": {
            "$ref": "#/components/schemas/ApplicationType"
          },
          "hostingType": {
            "$ref": "#/components/schemas/HostingType"
          },
          "developmentType": {
            "$ref": "#/components/schemas/DevelopmentType"
          },
          "maintenanceType": {
            "$ref": "#/components/schemas/MaintenanceType"
          },
          "supportType": {
            "$ref": "#/components/schemas/SupportType"
          },
          "purposes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          },
          "readonly": {
            "type": "boolean"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "dataProcessings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingLightDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssetDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AssetType": {
        "enum": [
          "Software",
          "Building",
          "Network",
          "Material",
          "Data",
          "People",
          "Process"
        ],
        "type": "string"
      },
      "AttachmentDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "external": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "builtIn": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/AttachmentSource"
          },
          "iconUrl": {
            "type": "string",
            "nullable": true
          },
          "thumbnailUrl": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "maxLength": 255,
            "type": "string"
          },
          "containerId": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          },
          "documentContent": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deleted": {
            "type": "boolean"
          },
          "nbDownload": {
            "type": "integer",
            "format": "int32"
          },
          "nbFiles": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateDeleted": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "type": {
            "$ref": "#/components/schemas/AttachmentType"
          },
          "isFolder": {
            "type": "boolean",
            "readOnly": true
          },
          "isEditable": {
            "type": "boolean",
            "readOnly": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttachmentSource": {
        "enum": [
          "Dastra",
          "AzureBlobStorage",
          "AmazonS3",
          "GoogleDrive",
          "OneDrive"
        ],
        "type": "string"
      },
      "AttachmentType": {
        "enum": [
          "File",
          "Folder",
          "ExternalFile"
        ],
        "type": "string"
      },
      "AuditAnnotationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "questionId": {
            "type": "string",
            "description": "Audit question id",
            "nullable": true
          },
          "auditResponseId": {
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "state": {
            "$ref": "#/components/schemas/AuditAnnotationState"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "suggestedResponse": {
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Content of the notification",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An annotation"
      },
      "AuditAnnotationState": {
        "enum": [
          "Pending",
          "Review",
          "Done"
        ],
        "type": "string"
      },
      "AuditAnswer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "color": {
            "maxLength": 12,
            "type": "string",
            "nullable": true
          },
          "rangeValue": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "score": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "nonApplicable": {
            "type": "boolean"
          },
          "goodAnswer": {
            "type": "boolean"
          },
          "impact": {
            "$ref": "#/components/schemas/ImpactScore"
          },
          "probability": {
            "$ref": "#/components/schemas/ProbabilityScore"
          },
          "taskSuggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditTask"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Each possible answer are stored with an id, score and task suggestions"
      },
      "AuditAttachment": {
        "required": [
          "containerId",
          "fileName",
          "questionId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "containerId": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "questionId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/AuditAttachmentType"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "respondantId": {
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AuditAttachmentType": {
        "enum": [
          "Question",
          "Annotation"
        ],
        "type": "string"
      },
      "AuditMatrixDto": {
        "type": "object",
        "properties": {
          "template": {
            "$ref": "#/components/schemas/AuditTemplateDto"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatrixColumn"
            },
            "nullable": true
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatrixRow"
            },
            "nullable": true
          },
          "rateScore": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Audit template update/insert/list model"
      },
      "AuditObjectType": {
        "enum": [
          "Actor",
          "Asset",
          "DataProcessing",
          "DataBreach",
          "DataSubject",
          "SecurityMeasure",
          "DataRetentionRule",
          "RiskEvaluation",
          "Application"
        ],
        "type": "string"
      },
      "AuditQueryType": {
        "enum": [
          "MostRecent",
          "NeedRenew",
          "IncludeRevision"
        ],
        "type": "string"
      },
      "AuditQuestion": {
        "required": [
          "label",
          "slug"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "slug": {
            "type": "string",
            "description": "The slug must be unique in the whole form"
          },
          "label": {
            "type": "string",
            "description": "Label de la question"
          },
          "tooltipHtml": {
            "type": "string",
            "nullable": true
          },
          "descriptionHtml": {
            "type": "string",
            "nullable": true
          },
          "badResponseCommentHtml": {
            "type": "string",
            "nullable": true
          },
          "goodResponseCommentHtml": {
            "type": "string",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "min": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "regex": {
            "type": "string",
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AuditQuestionType"
          },
          "dynamicSelectType": {
            "$ref": "#/components/schemas/AuditQuestionDynamicObjectType"
          },
          "editableOptions": {
            "type": "boolean"
          },
          "complianceRules": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplianceRule"
            },
            "description": "List of compliance rule applied",
            "nullable": true
          },
          "displayConditions": {
            "$ref": "#/components/schemas/ConditionRuleSet"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditAnswer"
            },
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "description": "Mandatory or not"
          },
          "completeScore": {
            "type": "integer",
            "description": "The score of completion linked to the question\r\n(At least 1)",
            "format": "int32"
          },
          "riskEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AuditQuestionDynamicObjectType": {
        "enum": [
          "Application",
          "SecurityMeasure",
          "Actor",
          "DataRetentionRule",
          "DataField"
        ],
        "type": "string"
      },
      "AuditQuestionType": {
        "enum": [
          "ShortText",
          "LongText",
          "RichText",
          "Date",
          "DateTime",
          "Number",
          "Range",
          "Radio",
          "Checkbox",
          "SingleSelect",
          "Multiselect",
          "Tags",
          "Attachments",
          "DynamicMultiple",
          "DynamicSingle"
        ],
        "type": "string"
      },
      "AuditRadarGraph": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditRadarGraphSerieValue"
            },
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditRadarGraphSerieValue": {
        "type": "object",
        "properties": {
          "y": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditRelatedTask": {
        "required": [
          "label",
          "questionId"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "type": "string",
            "format": "uuid"
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 120,
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          }
        },
        "additionalProperties": false
      },
      "AuditResponseChangeStateDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "reviewHtml": {
            "type": "string",
            "nullable": true
          },
          "resetQuestionState": {
            "type": "boolean",
            "description": "If true, it set state of each question to \"None\""
          }
        },
        "additionalProperties": false
      },
      "AuditResponseDto": {
        "required": [
          "area",
          "dateCreation",
          "label",
          "workspaceId"
        ],
        "type": "object",
        "properties": {
          "radarGraphData": {
            "$ref": "#/components/schemas/AuditRadarGraph"
          },
          "template": {
            "$ref": "#/components/schemas/AuditTemplateDto"
          },
          "dateNextAudit": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "auditDurationDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "nbCorrections": {
            "type": "integer",
            "format": "int32"
          },
          "nbValidations": {
            "type": "integer",
            "format": "int32"
          },
          "nextAuditDaysRemaining": {
            "type": "integer",
            "description": "Time to next audit depending on template params",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "responseItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditResponseItem"
            },
            "description": "JSON Serialized in DB responses",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditAttachment"
            },
            "description": "Attachments",
            "nullable": true
          },
          "relatedTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditRelatedTask"
            },
            "description": "Related tasks",
            "nullable": true
          },
          "shared": {
            "type": "boolean",
            "description": "Shared with everybo"
          },
          "isRespondant": {
            "type": "boolean"
          },
          "isOwner": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "objectType": {
            "$ref": "#/components/schemas/AuditObjectType"
          },
          "objectId": {
            "maxLength": 150,
            "type": "string",
            "description": "Object Id",
            "nullable": true
          },
          "objectLabel": {
            "type": "string",
            "nullable": true
          },
          "objectLogoUrl": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "isRevision": {
            "type": "boolean"
          },
          "revisionDescription": {
            "type": "string",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          },
          "noValidation": {
            "type": "boolean",
            "description": "Wether the validation step is skipped or not"
          },
          "workspaceId": {
            "type": "integer",
            "format": "int32"
          },
          "area": {
            "$ref": "#/components/schemas/AreaDto"
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/AuditResponseState"
          },
          "publishedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "responseDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "format": "uuid"
          },
          "annotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditAnnotationDto"
            },
            "description": "The annotations are used for the reviewer to",
            "nullable": true
          },
          "auditSharedLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditSharedLink"
            },
            "nullable": true
          },
          "readiness": {
            "type": "integer",
            "description": "The calculated score base on responses and template",
            "format": "int32",
            "nullable": true
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "maxScore": {
            "type": "number",
            "format": "double"
          },
          "completionRate": {
            "type": "integer",
            "description": "Complete rate",
            "format": "int32",
            "nullable": true
          },
          "nbAnswers": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nbQuestions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditStakeHolderDto"
            },
            "description": "List of owners and respondants",
            "nullable": true
          },
          "respondants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditStakeHolderDto"
            },
            "description": "Respondants",
            "nullable": true
          },
          "actionPlanDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditResponseDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditResponseDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AuditResponseEvaluationState": {
        "enum": [
          "None",
          "NeedCorrections",
          "Rejected",
          "Validated"
        ],
        "type": "string"
      },
      "AuditResponseInvitationDto": {
        "required": [
          "id",
          "respondantIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "respondantIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "sendImmediatly": {
            "type": "boolean"
          },
          "scheduleDateTimeLocal": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "scheduleDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "scheduleTime": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditResponseItem": {
        "required": [
          "questionId"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "type": "string",
            "format": "uuid"
          },
          "questionSlug": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "respondantId": {
            "type": "string",
            "description": "Stakeholder Id",
            "format": "uuid",
            "nullable": true
          },
          "approverId": {
            "type": "string",
            "description": "Approver id",
            "format": "uuid",
            "nullable": true
          },
          "dateApproved": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "value": {
            "description": "Response value object",
            "nullable": true
          },
          "description": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "internalDescription": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "impact": {
            "$ref": "#/components/schemas/ImpactScore"
          },
          "probability": {
            "$ref": "#/components/schemas/ProbabilityScore"
          },
          "state": {
            "$ref": "#/components/schemas/AuditResponseEvaluationState"
          }
        },
        "additionalProperties": false,
        "description": "Audit response item"
      },
      "AuditResponseItemDto": {
        "required": [
          "questionId",
          "questionSlug"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "type": "string",
            "format": "uuid"
          },
          "questionSlug": {
            "type": "string"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "description": "Response value object",
            "nullable": true
          },
          "description": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "internalDescription": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "impact": {
            "$ref": "#/components/schemas/ImpactScore"
          },
          "probability": {
            "$ref": "#/components/schemas/ProbabilityScore"
          }
        },
        "additionalProperties": false
      },
      "AuditResponseLightDto": {
        "required": [
          "area",
          "dateCreation",
          "label",
          "workspaceId"
        ],
        "type": "object",
        "properties": {
          "template": {
            "$ref": "#/components/schemas/AuditTemplateLightDto"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "objectType": {
            "$ref": "#/components/schemas/AuditObjectType"
          },
          "objectId": {
            "maxLength": 150,
            "type": "string",
            "description": "Object Id",
            "nullable": true
          },
          "objectLabel": {
            "type": "string",
            "nullable": true
          },
          "objectLogoUrl": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "isRevision": {
            "type": "boolean"
          },
          "revisionDescription": {
            "type": "string",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          },
          "noValidation": {
            "type": "boolean",
            "description": "Wether the validation step is skipped or not"
          },
          "workspaceId": {
            "type": "integer",
            "format": "int32"
          },
          "area": {
            "$ref": "#/components/schemas/AreaDto"
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/AuditResponseState"
          },
          "publishedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "responseDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "format": "uuid"
          },
          "annotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditAnnotationDto"
            },
            "description": "The annotations are used for the reviewer to",
            "nullable": true
          },
          "auditSharedLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditSharedLink"
            },
            "nullable": true
          },
          "readiness": {
            "type": "integer",
            "description": "The calculated score base on responses and template",
            "format": "int32",
            "nullable": true
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "maxScore": {
            "type": "number",
            "format": "double"
          },
          "completionRate": {
            "type": "integer",
            "description": "Complete rate",
            "format": "int32",
            "nullable": true
          },
          "nbAnswers": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nbQuestions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditStakeHolderDto"
            },
            "description": "List of owners and respondants",
            "nullable": true
          },
          "respondants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditStakeHolderDto"
            },
            "description": "Respondants",
            "nullable": true
          },
          "actionPlanDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Simple audit question displayed in tables"
      },
      "AuditResponseLightDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditResponseLightDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AuditResponsePlanificationDto": {
        "required": [
          "areaId",
          "label",
          "respondants"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "description": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "noValidation": {
            "type": "boolean",
            "description": "Wether the validation step is skipped or not"
          },
          "templateId": {
            "type": "string",
            "description": "Audit template linked",
            "format": "uuid"
          },
          "objectId": {
            "type": "string",
            "nullable": true
          },
          "objectType": {
            "$ref": "#/components/schemas/AuditObjectType"
          },
          "batchMod": {
            "type": "boolean",
            "description": "If true, we create an audit response per respondant\r\nThe notification will be sent automatically"
          },
          "sendNotificationImmediatly": {
            "type": "boolean"
          },
          "messageHtml": {
            "type": "string",
            "nullable": true
          },
          "respondants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditStakeHolderDto"
            }
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditStakeHolderDto"
            },
            "nullable": true
          },
          "stakeholders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditStakeHolderDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditResponseQuery": {
        "type": "object",
        "properties": {
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "q": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditResponseState"
            },
            "nullable": true
          },
          "templateIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "minReadiness": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxReadiness": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "needRenew": {
            "type": "boolean"
          },
          "objectType": {
            "$ref": "#/components/schemas/AuditObjectType"
          },
          "objectId": {
            "type": "string",
            "nullable": true
          },
          "respondantIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ownerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AuditQueryType"
          },
          "archived": {
            "type": "boolean"
          },
          "includeGraphs": {
            "type": "boolean"
          },
          "includeTasks": {
            "type": "boolean"
          },
          "select": {
            "type": "string",
            "description": "Comma separated list of fields",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of the result page (default: 20, max 500)",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sortBy": {
            "type": "string",
            "description": "The field to sort",
            "nullable": true
          },
          "asc": {
            "type": "boolean",
            "description": "True to sort ascending"
          },
          "filters": {
            "type": "string",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditResponseRenewDto": {
        "type": "object",
        "properties": {
          "responseId": {
            "type": "string",
            "format": "uuid"
          },
          "keepResponses": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AuditResponseState": {
        "enum": [
          "Standby",
          "InProgress",
          "PendingValidation",
          "Published",
          "Cancelled"
        ],
        "type": "string",
        "description": "Audit global response states"
      },
      "AuditResponseStatePayload": {
        "type": "object",
        "properties": {
          "questionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/AuditResponseEvaluationState"
          }
        },
        "additionalProperties": false
      },
      "AuditResponseUpdateDto": {
        "required": [
          "id",
          "responseItems"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "initialization": {
            "type": "boolean",
            "description": "Set to true if this is the initial response of the audit\r\nThis will skip some security check to verify paternity of the responder"
          },
          "responseItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditResponseItemDto"
            }
          }
        },
        "additionalProperties": false
      },
      "AuditResultAnalysis": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 100,
            "type": "string"
          },
          "variant": {
            "$ref": "#/components/schemas/AuditResultAnalysisVariant"
          },
          "contentHtml": {
            "type": "string",
            "nullable": true
          },
          "displayConditions": {
            "$ref": "#/components/schemas/ConditionRuleSet"
          }
        },
        "additionalProperties": false
      },
      "AuditResultAnalysisVariant": {
        "enum": [
          "Info",
          "Success",
          "Warning",
          "Danger"
        ],
        "type": "string"
      },
      "AuditRiskLevel": {
        "type": "object",
        "properties": {
          "probability": {
            "$ref": "#/components/schemas/ProbabilityScore"
          },
          "impact": {
            "$ref": "#/components/schemas/ImpactScore"
          },
          "questionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AuditSection": {
        "required": [
          "label",
          "slug",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "slug": {
            "maxLength": 80,
            "type": "string",
            "description": "Chaine de caractère qui =>"
          },
          "label": {
            "maxLength": 80,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SectionType"
          },
          "descriptionHtml": {
            "type": "string",
            "description": "Html content above the fold",
            "nullable": true
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditQuestion"
            },
            "nullable": true
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditSection"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A set of question or a html presentation"
      },
      "AuditSharedLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditStakeHolderDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "readOnly": true
          },
          "type": {
            "$ref": "#/components/schemas/AuditStakeHolderType"
          },
          "user": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "reviewHtml": {
            "type": "string",
            "nullable": true
          },
          "validationHtml": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean"
          },
          "allowedToInvite": {
            "type": "boolean"
          },
          "dateView": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateValidation": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateInvited": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nbInvitations": {
            "type": "integer",
            "format": "int32"
          },
          "assignedQuestions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Stakeholderdto"
      },
      "AuditStakeHolderType": {
        "enum": [
          "Owner",
          "Respondant"
        ],
        "type": "string"
      },
      "AuditTask": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 120,
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          }
        },
        "additionalProperties": false
      },
      "AuditTemplateCombinationDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "workspaceId": {
            "type": "integer",
            "format": "int32"
          },
          "fromLibrary": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AuditTemplateDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditSection"
            },
            "description": "This items must be json serialied in database",
            "nullable": true
          },
          "resultAnalysis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditResultAnalysis"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "version": {
            "type": "string",
            "description": "Template version",
            "nullable": true
          },
          "newVersion": {
            "type": "boolean"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "isPinned": {
            "type": "boolean"
          },
          "isRevision": {
            "type": "boolean"
          },
          "isBlockAnalysisShared": {
            "type": "boolean"
          },
          "nbReferences": {
            "type": "integer",
            "description": "Number times where this element was used in referentials",
            "format": "int64",
            "readOnly": true
          },
          "referenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "nbResponses": {
            "type": "integer",
            "format": "int64"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "revisionDescription": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "scheduleIntervalDays": {
            "type": "integer",
            "description": "Interval between each audit",
            "format": "int32",
            "nullable": true
          },
          "versionNumber": {
            "type": "integer",
            "description": "Version increment",
            "format": "int32"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AuditTemplateType"
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "objectType": {
            "$ref": "#/components/schemas/AuditObjectType"
          },
          "defaultOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLightDto"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "nbQuestions": {
            "type": "integer",
            "format": "int32"
          },
          "nbQuestionsRequired": {
            "type": "integer",
            "format": "int32"
          },
          "nbDatas": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Audit template update/insert/list model"
      },
      "AuditTemplateLightDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "version": {
            "type": "string",
            "description": "Template version",
            "nullable": true
          },
          "newVersion": {
            "type": "boolean"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "isPinned": {
            "type": "boolean"
          },
          "isRevision": {
            "type": "boolean"
          },
          "isBlockAnalysisShared": {
            "type": "boolean"
          },
          "nbReferences": {
            "type": "integer",
            "description": "Number times where this element was used in referentials",
            "format": "int64",
            "readOnly": true
          },
          "referenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "nbResponses": {
            "type": "integer",
            "format": "int64"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "revisionDescription": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "scheduleIntervalDays": {
            "type": "integer",
            "description": "Interval between each audit",
            "format": "int32",
            "nullable": true
          },
          "versionNumber": {
            "type": "integer",
            "description": "Version increment",
            "format": "int32"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AuditTemplateType"
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "objectType": {
            "$ref": "#/components/schemas/AuditObjectType"
          },
          "defaultOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserLightDto"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "nbQuestions": {
            "type": "integer",
            "format": "int32"
          },
          "nbQuestionsRequired": {
            "type": "integer",
            "format": "int32"
          },
          "nbDatas": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AuditTemplateLightDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditTemplateLightDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AuditTemplateType": {
        "enum": [
          "Standard",
          "Compliance",
          "PIA",
          "Vendor",
          "TIA",
          "LIA",
          "Formation"
        ],
        "type": "string"
      },
      "BaseRole": {
        "enum": [
          "User",
          "Admin",
          "SuperAdmin",
          "API",
          "Author",
          "Support",
          "Marketing",
          "Sales"
        ],
        "type": "string"
      },
      "BillingType": {
        "enum": [
          "Year",
          "Month"
        ],
        "type": "string"
      },
      "CategoriesDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDto"
            },
            "nullable": true
          },
          "parent": {
            "$ref": "#/components/schemas/CategoryDto"
          }
        },
        "additionalProperties": false
      },
      "CategoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "parent": {
            "$ref": "#/components/schemas/CategoryDto"
          }
        },
        "additionalProperties": false
      },
      "ChartSerieValue": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "nullable": true
          },
          "y": {
            "type": "integer",
            "format": "int32"
          },
          "x": {
            "type": "number",
            "description": "Date in unix timestamp (milliseconds)",
            "format": "double",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClosedReason": {
        "enum": [
          "None",
          "Accepted",
          "Duplicate",
          "WrongIdentity",
          "NotAdmissible",
          "Other",
          "Cancelled",
          "FiledAway"
        ],
        "type": "string"
      },
      "CloudAttachmentContentDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "documentContent": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "folderId": {
            "type": "string",
            "nullable": true
          },
          "drive": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CloudAttachmentDeleteDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "hardDelete": {
            "type": "boolean"
          },
          "drive": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CloudAttachmentDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "external": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "builtIn": {
            "type": "boolean"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/AttachmentSource"
          },
          "iconUrl": {
            "type": "string",
            "nullable": true
          },
          "thumbnailUrl": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "maxLength": 255,
            "type": "string"
          },
          "containerId": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          },
          "documentContent": {
            "type": "string",
            "nullable": true
          },
          "deleted": {
            "type": "boolean"
          },
          "nbDownload": {
            "type": "integer",
            "format": "int32"
          },
          "nbFiles": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateDeleted": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "type": {
            "$ref": "#/components/schemas/AttachmentType"
          },
          "isFolder": {
            "type": "boolean",
            "readOnly": true
          },
          "isEditable": {
            "type": "boolean",
            "readOnly": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CloudAttachmentListDto": {
        "type": "object",
        "properties": {
          "breadcrumbs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CloudAttachmentDto"
            },
            "nullable": true
          },
          "folder": {
            "$ref": "#/components/schemas/CloudAttachmentDto"
          },
          "backFolder": {
            "$ref": "#/components/schemas/CloudAttachmentDto"
          },
          "nextUrl": {
            "type": "string",
            "nullable": true
          },
          "hasNext": {
            "type": "boolean",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CloudAttachmentDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CloudAttachmentMoveDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "to": {
            "type": "string",
            "nullable": true
          },
          "drive": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CloudDrive": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "root": {
            "type": "boolean"
          },
          "weburl": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CloudProvider": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/NativeIntegrationType"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "lastErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "dateLastError": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "nbErrors": {
            "type": "integer",
            "format": "int32"
          },
          "inError": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CommentCounters": {
        "type": "object",
        "properties": {
          "totalOpened": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CommentCreationDto": {
        "required": [
          "message",
          "objectId",
          "objectType"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "recipientUserId": {
            "type": "integer",
            "format": "int32"
          },
          "objectId": {
            "maxLength": 50,
            "type": "string"
          },
          "objectType": {
            "$ref": "#/components/schemas/CommentObjectType"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommentDto": {
        "required": [
          "message",
          "objectId",
          "objectType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "workSpaceId": {
            "type": "integer",
            "format": "int32"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateResolution": {
            "type": "string",
            "description": "Marked as read date",
            "format": "date-time",
            "nullable": true
          },
          "resolvedBy": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "message": {
            "type": "string"
          },
          "objectId": {
            "maxLength": 50,
            "type": "string"
          },
          "objectType": {
            "$ref": "#/components/schemas/CommentObjectType"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CommentDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CommentObjectType": {
        "enum": [
          "DataProcessing",
          "DataSubject",
          "Task",
          "DataBreach",
          "Actor",
          "DataRetentionRule",
          "DataField",
          "Asset",
          "RiskEvaluation",
          "ControlPoint",
          "Application",
          "SecurityMeasure"
        ],
        "type": "string"
      },
      "ComplianceRule": {
        "enum": [
          "GDPR",
          "LGPD",
          "CCPA",
          "EPrivacy",
          "Iso9001"
        ],
        "type": "string"
      },
      "ConditionRuleOperator": {
        "enum": [
          "equal",
          "notEqual",
          "isNotNull",
          "isNull",
          "lessThan",
          "lessThanInclusive",
          "greaterThan",
          "greaterThanInclusive",
          "in",
          "notIn",
          "contains",
          "doesNotContains",
          "isEmpty",
          "isNotEmpty"
        ],
        "type": "string"
      },
      "ConditionRuleSeparator": {
        "enum": [
          "And",
          "Or"
        ],
        "type": "string"
      },
      "ConditionRuleSet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "separator": {
            "$ref": "#/components/schemas/ConditionRuleSeparator"
          },
          "field": {
            "type": "string",
            "description": "The variable name",
            "nullable": true
          },
          "operator": {
            "$ref": "#/components/schemas/ConditionRuleOperator"
          },
          "value": {
            "description": "The value to compare",
            "nullable": true
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionRuleSet"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "https://dabernathy89.github.io/vue-query-builder/configuration.html#rules"
      },
      "ContentDto": {
        "required": [
          "title",
          "url"
        ],
        "type": "object",
        "properties": {
          "featured": {
            "type": "boolean"
          },
          "title": {
            "maxLength": 255,
            "type": "string"
          },
          "excerpt": {
            "maxLength": 300,
            "type": "string",
            "description": "Subtitle",
            "nullable": true
          },
          "lang": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "maxLength": 255,
            "type": "string"
          },
          "intro": {
            "maxLength": 800,
            "type": "string",
            "nullable": true
          },
          "tableOfContents": {
            "type": "boolean"
          },
          "markDownContent": {
            "type": "string",
            "nullable": true
          },
          "htmlContent": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/ContentState"
          },
          "author": {
            "$ref": "#/components/schemas/UserDto"
          },
          "authorId": {
            "type": "integer",
            "format": "int32"
          },
          "datePublication": {
            "type": "string",
            "format": "date-time"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "mainCategory": {
            "$ref": "#/components/schemas/CategoryDto"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDto"
            },
            "nullable": true
          },
          "metaDatas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetaData"
            },
            "nullable": true
          },
          "imageUrl": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "imageThumbUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ContentDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ContentState": {
        "enum": [
          "Standby",
          "Redaction",
          "Published",
          "Archived"
        ],
        "type": "string"
      },
      "ControlPointAnswer": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 250,
            "type": "string"
          },
          "value": {
            "type": "number",
            "format": "double"
          },
          "color": {
            "maxLength": 9,
            "type": "string",
            "nullable": true
          },
          "nonApplicable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ControlPointDto": {
        "required": [
          "answers",
          "label",
          "priority",
          "ref"
        ],
        "type": "object",
        "properties": {
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "owner": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ControlPointResponseDto"
            },
            "nullable": true
          },
          "nbResponses": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 250,
            "type": "string"
          },
          "ref": {
            "maxLength": 20,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ControlPointType"
          },
          "ponderation": {
            "type": "number",
            "format": "double"
          },
          "ownerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "priority": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "nbDaysFrequency": {
            "type": "integer",
            "description": "Set the frequency between each evaluation",
            "format": "int32",
            "nullable": true
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ControlPointAnswer"
            },
            "description": "This prop must be serialized as json"
          }
        },
        "additionalProperties": false
      },
      "ControlPointLightDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ref": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ControlPointType"
          },
          "label": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ControlPointResponseAttachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "containerId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ControlPointResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "riskEvaluationId": {
            "type": "string",
            "format": "uuid"
          },
          "controlPointId": {
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "state": {
            "$ref": "#/components/schemas/ControlPointResponseState"
          },
          "answerId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "current": {
            "type": "boolean"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ControlPointResponseAttachment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ControlPointResponseState": {
        "enum": [
          "Draft",
          "UnderReview",
          "Done"
        ],
        "type": "string"
      },
      "ControlPointType": {
        "enum": [
          "Impact",
          "Probability"
        ],
        "type": "string"
      },
      "ControlPointUpdateDto": {
        "required": [
          "answers",
          "label",
          "priority",
          "ref"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 250,
            "type": "string"
          },
          "ref": {
            "maxLength": 20,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ControlPointType"
          },
          "ponderation": {
            "type": "number",
            "format": "double"
          },
          "ownerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "priority": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "nbDaysFrequency": {
            "type": "integer",
            "description": "Set the frequency between each evaluation",
            "format": "int32",
            "nullable": true
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ControlPointAnswer"
            },
            "description": "This prop must be serialized as json"
          }
        },
        "additionalProperties": false
      },
      "CreateCloudFolderDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "folderId": {
            "type": "string",
            "nullable": true
          },
          "drive": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "maxLength": 150,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DataBreachDto": {
        "required": [
          "label",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string",
            "description": "Text label of the data breach"
          },
          "descriptionHtml": {
            "type": "string",
            "description": "Description of the data breach (HTML / rich text editor)\r\nHtml is automatically controller",
            "nullable": true
          },
          "location": {
            "type": "string",
            "description": "Location of the breach (Text description)",
            "nullable": true
          },
          "access": {
            "type": "boolean",
            "description": "Data breach type"
          },
          "integrity": {
            "type": "boolean"
          },
          "availability": {
            "type": "boolean"
          },
          "state": {
            "$ref": "#/components/schemas/DataBreachState"
          },
          "reason": {
            "$ref": "#/components/schemas/DataBreachReason"
          },
          "reasonDescription": {
            "maxLength": 1000,
            "type": "string",
            "description": "Further details on the data breach reason (text without html)",
            "nullable": true
          },
          "processorInvolved": {
            "type": "boolean",
            "description": "Wether the data breach involves or not processors"
          },
          "processors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActorDto"
            },
            "description": "Data processors list involved",
            "nullable": true
          },
          "personCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataBreachPersonCategoryDto"
            },
            "description": "List of person categories concerned",
            "nullable": true
          },
          "dataDescriptionHtml": {
            "type": "string",
            "nullable": true
          },
          "sensitiveData": {
            "type": "boolean",
            "nullable": true
          },
          "probabilityScore": {
            "$ref": "#/components/schemas/DataBreachProbabilityScore"
          },
          "impactScore": {
            "$ref": "#/components/schemas/DataBreachImpactScore"
          },
          "riskAnalysisDone": {
            "type": "boolean",
            "nullable": true
          },
          "score": {
            "type": "integer",
            "format": "int32"
          },
          "riskLevel": {
            "$ref": "#/components/schemas/DataBreachRiskLevel"
          },
          "riskLevelForced": {
            "$ref": "#/components/schemas/DataBreachRiskLevel"
          },
          "riskAnalysisHtmlContent": {
            "type": "string",
            "nullable": true
          },
          "dataVolume": {
            "type": "integer",
            "description": "Nb data involved",
            "format": "int64",
            "nullable": true
          },
          "dataSupport": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "communicationDone": {
            "type": "boolean",
            "nullable": true
          },
          "noCommunicationReason": {
            "$ref": "#/components/schemas/NoCommunicationReason"
          },
          "noCommunicationJustification": {
            "type": "string",
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataBreachNotificationDto"
            },
            "description": "Notification types",
            "nullable": true
          },
          "period": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "startDate": {
            "type": "string",
            "description": "Start date",
            "format": "date-time"
          },
          "startHour": {
            "type": "string",
            "description": "hh:mm:ss string format",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endHour": {
            "type": "string",
            "description": "hh:mm:ss string format",
            "nullable": true
          },
          "constatationDate": {
            "type": "string",
            "format": "date-time"
          },
          "constatationHour": {
            "type": "string",
            "description": "hh:mm:ss string format",
            "nullable": true
          },
          "notificationDueTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "operator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "operatorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workFlowStep": {
            "$ref": "#/components/schemas/WorkFlowStepDto"
          },
          "area": {
            "$ref": "#/components/schemas/AreaDto"
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "workSpace": {
            "$ref": "#/components/schemas/WorkSpaceDto"
          },
          "postMortemDone": {
            "type": "boolean"
          },
          "postMortemDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "postMortemRef": {
            "type": "string",
            "nullable": true
          },
          "postMortemHtml": {
            "type": "string",
            "nullable": true
          },
          "securityMeasures": {
            "type": "string",
            "nullable": true
          },
          "adoptedSecurityMeasures": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "complementaryInformations": {
            "type": "string",
            "nullable": true
          },
          "dataProcessings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingLightDto"
            },
            "nullable": true
          },
          "dateClosed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateArchived": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          }
        },
        "additionalProperties": false
      },
      "DataBreachDtoJsonPatchDocument": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataBreachDtoOperation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataBreachDtoOperation": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataBreachDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataBreachDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataBreachExportQuery": {
        "type": "object",
        "properties": {
          "useNativeColumn": {
            "type": "boolean"
          },
          "cols": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataBreachState"
            },
            "nullable": true
          },
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataBreachType"
            },
            "nullable": true
          },
          "workflows": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "operators": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "q": {
            "type": "string",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "select": {
            "type": "string",
            "description": "Comma separated list of fields",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of the result page (default: 20, max 500)",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sortBy": {
            "type": "string",
            "description": "The field to sort",
            "nullable": true
          },
          "asc": {
            "type": "boolean",
            "description": "True to sort ascending"
          },
          "filters": {
            "type": "string",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataBreachImpactScore": {
        "enum": [
          "Unset",
          "VeryLow",
          "Limited",
          "Important",
          "Maximal"
        ],
        "type": "string"
      },
      "DataBreachInvitationDto": {
        "required": [
          "body",
          "userIds"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "sectionLabel": {
            "type": "string",
            "nullable": true
          },
          "section": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataBreachNotificationDto": {
        "required": [
          "date"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "identifier": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "support": {
            "$ref": "#/components/schemas/DataBreachNotificationSupport"
          },
          "type": {
            "$ref": "#/components/schemas/DataBreachNotificationType"
          },
          "htmlContent": {
            "type": "string",
            "nullable": true
          },
          "numberPeopleNotified": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataBreachNotificationSupport": {
        "enum": [
          "Mail",
          "Letter",
          "PhoneCall",
          "WebsiteBanner",
          "Campaign",
          "Other"
        ],
        "type": "string"
      },
      "DataBreachNotificationType": {
        "enum": [
          "DataProtectionAuthorities",
          "Communication"
        ],
        "type": "string"
      },
      "DataBreachPersonCategoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PersonCategoryType"
          },
          "volume": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataBreachProbabilityScore": {
        "enum": [
          "Unset",
          "VeryLow",
          "Limited",
          "Important",
          "Maximal"
        ],
        "type": "string"
      },
      "DataBreachReason": {
        "enum": [
          "Unknown",
          "InternalIntentional",
          "InternalAccident",
          "ExternalIntentional",
          "ExternalAccident",
          "Other"
        ],
        "type": "string"
      },
      "DataBreachRiskLevel": {
        "enum": [
          "Low",
          "Medium",
          "High"
        ],
        "type": "string"
      },
      "DataBreachState": {
        "enum": [
          "Open",
          "Active",
          "Closed",
          "Archived2"
        ],
        "type": "string"
      },
      "DataBreachType": {
        "enum": [
          "Access",
          "Integrity",
          "Availability"
        ],
        "type": "string"
      },
      "DataFieldDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "archivingPolicy": {
            "type": "string",
            "nullable": true
          },
          "required": {
            "type": "boolean"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "definition": {
            "maxLength": 2500,
            "type": "string",
            "nullable": true
          },
          "technicalDefinition": {
            "maxLength": 2500,
            "type": "string",
            "nullable": true
          },
          "sensitiveDataFieldLegalJustification": {
            "$ref": "#/components/schemas/SensitiveDataFieldLegalJustification"
          },
          "sensitiveDataFieldLegalJustificationDescription": {
            "maxLength": 2500,
            "type": "string",
            "nullable": true
          },
          "sensitiveData": {
            "type": "boolean"
          },
          "personalDataCategory": {
            "$ref": "#/components/schemas/PersonalDataCategory"
          },
          "dataType": {
            "$ref": "#/components/schemas/GenericDataType"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          }
        },
        "additionalProperties": false,
        "description": "A data processing data field"
      },
      "DataFieldDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataFieldDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataProcessingActorCompleteDto": {
        "type": "object",
        "properties": {
          "dataProcessing": {
            "$ref": "#/components/schemas/DataProcessingLightDto"
          },
          "recipientType": {
            "$ref": "#/components/schemas/RecipientType"
          },
          "jobTitle": {
            "$ref": "#/components/schemas/JobTitle"
          },
          "type": {
            "$ref": "#/components/schemas/DataProcessingActorType"
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "label": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferDto"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "actorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "actor": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "area": {
            "$ref": "#/components/schemas/AreaBaseDto"
          },
          "purposes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "dataRetentionRules": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "readonly": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DataProcessingActorDto": {
        "type": "object",
        "properties": {
          "recipientType": {
            "$ref": "#/components/schemas/RecipientType"
          },
          "jobTitle": {
            "$ref": "#/components/schemas/JobTitle"
          },
          "type": {
            "$ref": "#/components/schemas/DataProcessingActorType"
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "label": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferDto"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "actorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "actor": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "area": {
            "$ref": "#/components/schemas/AreaBaseDto"
          },
          "purposes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "dataRetentionRules": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "readonly": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DataProcessingActorType": {
        "enum": [
          "Recipient",
          "DataController",
          "Stakeholder",
          "Referent"
        ],
        "type": "string"
      },
      "DataProcessingCreationDto": {
        "required": [
          "areaId",
          "label"
        ],
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 120,
            "type": "string"
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "processingType": {
            "$ref": "#/components/schemas/ProcessingType"
          }
        },
        "additionalProperties": false
      },
      "DataProcessingDashboardDto": {
        "type": "object",
        "properties": {
          "indicators": {
            "$ref": "#/components/schemas/DataProcessingStatsDto"
          },
          "areaSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectArrayChartSerieDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "legalBasisSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectArrayChartSerieDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "indicatorRepartitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectArrayChartSerieDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "personCategoriesSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectArrayChartSerieDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "hasDataTransfersSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectArrayChartSerieDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "countryTransfersSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectArrayChartSerieDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "subcontractorsSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectArrayChartSerieDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "dpiaDoneSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectArrayChartSerieDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "dpiaRequiredSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectArrayChartSerieDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "dateCreationSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectArrayChartSerieDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "workflowSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectArrayChartSerieDto"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingDataControllerDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "actorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "actor": {
            "$ref": "#/components/schemas/ActorLightDto"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "area": {
            "$ref": "#/components/schemas/AreaBaseDto"
          },
          "purposes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "dataRetentionRules": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "readonly": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DataProcessingDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 120,
            "minLength": 1,
            "type": "string",
            "description": "Label des données"
          },
          "creatorUser": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "state": {
            "$ref": "#/components/schemas/DataProcessingState"
          },
          "dateDeployment": {
            "type": "string",
            "description": "Deployment date",
            "format": "date-time",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateArchived": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "datePublication": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "versionDescription": {
            "maxLength": 800,
            "type": "string",
            "nullable": true
          },
          "processingType": {
            "$ref": "#/components/schemas/ProcessingType"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "area": {
            "$ref": "#/components/schemas/AreaBaseDto"
          },
          "entity": {
            "$ref": "#/components/schemas/AreaBaseDto"
          },
          "mergedFrom": {
            "$ref": "#/components/schemas/DataProcessingDto"
          },
          "mergeType": {
            "$ref": "#/components/schemas/RelationShipType"
          },
          "readonly": {
            "type": "boolean",
            "readOnly": true
          },
          "editable": {
            "type": "boolean",
            "readOnly": true
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDto"
            },
            "description": "Listing des applications associées => Il peut y avoir plusieurs workspaces associés",
            "nullable": true
          },
          "workFlowStepId": {
            "type": "integer",
            "description": "Le status du workflow => état de l'avancée de la saisie du traitement,\r\nA voir comment on le gère",
            "format": "int32"
          },
          "workflowStep": {
            "$ref": "#/components/schemas/WorkFlowStepDto"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          },
          "ref": {
            "maxLength": 50,
            "type": "string",
            "description": "Client is able to write is own reference",
            "nullable": true
          },
          "processingState": {
            "$ref": "#/components/schemas/ProcessingState"
          },
          "description": {
            "maxLength": 3000,
            "type": "string",
            "description": "Description longue du traitement (Peut aider pour la recherche full-text)",
            "nullable": true
          },
          "descriptionHtml": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "description": "Les tags associés au traitement (Pour un éventuel moteur de recherche)",
            "nullable": true
          },
          "subjectRightProcessDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfInformation": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfAccess": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfRectification": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfErasure": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfRestriction": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfOpposition": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfDataPortability": {
            "$ref": "#/components/schemas/AccessType"
          },
          "advanceDirectives": {
            "$ref": "#/components/schemas/AccessType"
          },
          "advanceDirectivesDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfInformationDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfAccessDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfRectificationDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfErasureDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfRestrictionDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfOppositionDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfDataPortabilityDescription": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "ownerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stakeHolders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingActorDto"
            },
            "nullable": true
          },
          "assessmentScoring": {
            "type": "boolean",
            "nullable": true
          },
          "automaticDecision": {
            "type": "boolean",
            "nullable": true
          },
          "systematicMonitoring": {
            "type": "boolean",
            "nullable": true
          },
          "specialCategoryData": {
            "type": "boolean",
            "nullable": true
          },
          "largeScaleCollection": {
            "type": "boolean",
            "nullable": true
          },
          "crossReferencing": {
            "type": "boolean",
            "nullable": true
          },
          "vulnerablePeople": {
            "type": "boolean",
            "nullable": true
          },
          "isDPIARequired": {
            "type": "boolean",
            "nullable": true
          },
          "dpiaDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "innovativeUse": {
            "type": "boolean",
            "nullable": true
          },
          "exclusionBenefitRightContract": {
            "type": "boolean",
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingActorDto"
            },
            "nullable": true
          },
          "dataControllers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingDataControllerDto"
            },
            "nullable": true
          },
          "dataRetentionRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRetentionRuleDto"
            },
            "nullable": true
          },
          "purposes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurposeDto"
            },
            "nullable": true
          },
          "securityMeasures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityMeasureDataTreatmentDto"
            },
            "description": "Mesure de sécurité techniques",
            "nullable": true
          },
          "personCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingPersonCategoryDto"
            },
            "nullable": true
          },
          "progression": {
            "type": "number",
            "format": "double"
          },
          "quality": {
            "type": "number",
            "format": "double"
          },
          "sensitivity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "riskLevel": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "visible": {
            "type": "boolean",
            "readOnly": true
          },
          "dpiaExemption": {
            "type": "boolean"
          },
          "dpiaExemptionJustification": {
            "type": "string",
            "nullable": true
          },
          "workSpaceId": {
            "type": "integer",
            "format": "int32"
          },
          "nbReferences": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "referenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataProcessingInsight": {
        "type": "object",
        "properties": {
          "step": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/InsightType"
          },
          "color": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "priority": {
            "$ref": "#/components/schemas/LogPriority"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "elementsName": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "score": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataProcessingInsightMessages": {
        "type": "object",
        "properties": {
          "progressionScore": {
            "$ref": "#/components/schemas/ScoreOutput"
          },
          "progression": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "qualityScore": {
            "$ref": "#/components/schemas/ScoreOutput"
          },
          "quality": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "sensitivityScore": {
            "$ref": "#/components/schemas/ScoreOutput"
          },
          "sensitivity": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "nbWarnings": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "insights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingInsight"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingInvitationDto": {
        "required": [
          "body",
          "userIds"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "sectionLabel": {
            "type": "string",
            "nullable": true
          },
          "section": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingLightDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "ref": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "riskLevel": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workspaceId": {
            "type": "integer",
            "format": "int32"
          },
          "archived": {
            "type": "boolean"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "processingType": {
            "$ref": "#/components/schemas/ProcessingType"
          }
        },
        "additionalProperties": false
      },
      "DataProcessingNodeType": {
        "enum": [
          "Entity",
          "Area",
          "DataProcessing",
          "Actor",
          "Transfer",
          "SecurityMeasure",
          "Recipient",
          "DataField",
          "DataRetentionRule",
          "Asset",
          "DataBreach",
          "Risk",
          "Unknown"
        ],
        "type": "string"
      },
      "DataProcessingPersonCategoryDto": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/PersonCategoryType"
          },
          "typeText": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "label": {
            "maxLength": 600,
            "type": "string",
            "nullable": true
          },
          "minorConcerned": {
            "type": "boolean"
          },
          "dataSubjectVolumeMax": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "readonly": {
            "type": "boolean"
          },
          "purposes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingQuery": {
        "type": "object",
        "properties": {
          "dataSetId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "actorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stakeholderId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "recipientId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "customerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "securityMeasureId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "archived": {
            "type": "boolean",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "workflows": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingState"
            },
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ProcessingType"
          },
          "q": {
            "type": "string",
            "nullable": true
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "select": {
            "type": "string",
            "description": "Comma separated list of fields",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of the result page (default: 20, max 500)",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sortBy": {
            "type": "string",
            "description": "The field to sort",
            "nullable": true
          },
          "asc": {
            "type": "boolean",
            "description": "True to sort ascending"
          },
          "filters": {
            "type": "string",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingRelationShipDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "element": {
            "$ref": "#/components/schemas/DataProcessingLightDto"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "relationShipType": {
            "$ref": "#/components/schemas/RelationShipType"
          },
          "create": {
            "type": "boolean"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "processingType": {
            "$ref": "#/components/schemas/ProcessingType"
          },
          "workspaceId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataProcessingSetStateDto": {
        "type": "object",
        "properties": {
          "published": {
            "type": "boolean"
          },
          "versionDescription": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingState": {
        "enum": [
          "Active",
          "Draft",
          "Archived",
          "Deleted"
        ],
        "type": "string"
      },
      "DataProcessingStatsDto": {
        "type": "object",
        "properties": {
          "percentageAccomplished": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "percentageComplete": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "nbTreatmentComplete": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nbTreatmentNotComplete": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nbTreatmentPublished": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nbTreatmentDraft": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nbTreatments": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "workFlowSteps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SerieValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "stats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingStatValueDto"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingStatValueDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/DataProcessingState"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "ref": {
            "type": "string",
            "nullable": true
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "workFlowStep": {
            "$ref": "#/components/schemas/WorkFlowStepDto"
          },
          "progression": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DataProcessingTreeDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaDataProcessingTreeItemDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingTreeItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "archived": {
            "type": "boolean"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "ref": {
            "type": "string",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/DataProcessingState"
          },
          "processingType": {
            "$ref": "#/components/schemas/ProcessingType"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "versionDescription": {
            "type": "string",
            "nullable": true
          },
          "progression": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "treeItemType": {
            "$ref": "#/components/schemas/TreeItemType"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingTreeItemDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingUpdateDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "nbReferences": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 120,
            "minLength": 1,
            "type": "string",
            "description": "Label des données"
          },
          "creatorUser": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "state": {
            "$ref": "#/components/schemas/DataProcessingState"
          },
          "dateDeployment": {
            "type": "string",
            "description": "Deployment date",
            "format": "date-time",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateArchived": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "datePublication": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "versionDescription": {
            "maxLength": 800,
            "type": "string",
            "nullable": true
          },
          "processingType": {
            "$ref": "#/components/schemas/ProcessingType"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "area": {
            "$ref": "#/components/schemas/AreaBaseDto"
          },
          "entity": {
            "$ref": "#/components/schemas/AreaBaseDto"
          },
          "mergedFrom": {
            "$ref": "#/components/schemas/DataProcessingDto"
          },
          "mergeType": {
            "$ref": "#/components/schemas/RelationShipType"
          },
          "readonly": {
            "type": "boolean",
            "readOnly": true
          },
          "editable": {
            "type": "boolean",
            "readOnly": true
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDto"
            },
            "description": "Listing des applications associées => Il peut y avoir plusieurs workspaces associés",
            "nullable": true
          },
          "workFlowStepId": {
            "type": "integer",
            "description": "Le status du workflow => état de l'avancée de la saisie du traitement,\r\nA voir comment on le gère",
            "format": "int32"
          },
          "workflowStep": {
            "$ref": "#/components/schemas/WorkFlowStepDto"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          },
          "ref": {
            "maxLength": 50,
            "type": "string",
            "description": "Client is able to write is own reference",
            "nullable": true
          },
          "processingState": {
            "$ref": "#/components/schemas/ProcessingState"
          },
          "description": {
            "maxLength": 3000,
            "type": "string",
            "description": "Description longue du traitement (Peut aider pour la recherche full-text)",
            "nullable": true
          },
          "descriptionHtml": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "description": "Les tags associés au traitement (Pour un éventuel moteur de recherche)",
            "nullable": true
          },
          "subjectRightProcessDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfInformation": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfAccess": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfRectification": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfErasure": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfRestriction": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfOpposition": {
            "$ref": "#/components/schemas/AccessType"
          },
          "rightOfDataPortability": {
            "$ref": "#/components/schemas/AccessType"
          },
          "advanceDirectives": {
            "$ref": "#/components/schemas/AccessType"
          },
          "advanceDirectivesDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfInformationDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfAccessDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfRectificationDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfErasureDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfRestrictionDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfOppositionDescription": {
            "type": "string",
            "nullable": true
          },
          "rightOfDataPortabilityDescription": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "ownerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "stakeHolders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingActorDto"
            },
            "nullable": true
          },
          "assessmentScoring": {
            "type": "boolean",
            "nullable": true
          },
          "automaticDecision": {
            "type": "boolean",
            "nullable": true
          },
          "systematicMonitoring": {
            "type": "boolean",
            "nullable": true
          },
          "specialCategoryData": {
            "type": "boolean",
            "nullable": true
          },
          "largeScaleCollection": {
            "type": "boolean",
            "nullable": true
          },
          "crossReferencing": {
            "type": "boolean",
            "nullable": true
          },
          "vulnerablePeople": {
            "type": "boolean",
            "nullable": true
          },
          "isDPIARequired": {
            "type": "boolean",
            "nullable": true
          },
          "dpiaDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "innovativeUse": {
            "type": "boolean",
            "nullable": true
          },
          "exclusionBenefitRightContract": {
            "type": "boolean",
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingActorDto"
            },
            "nullable": true
          },
          "dataControllers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingDataControllerDto"
            },
            "nullable": true
          },
          "dataRetentionRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRetentionRuleDto"
            },
            "nullable": true
          },
          "purposes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurposeDto"
            },
            "nullable": true
          },
          "securityMeasures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityMeasureDataTreatmentDto"
            },
            "description": "Mesure de sécurité techniques",
            "nullable": true
          },
          "personCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingPersonCategoryDto"
            },
            "nullable": true
          },
          "progression": {
            "type": "number",
            "format": "double"
          },
          "quality": {
            "type": "number",
            "format": "double"
          },
          "sensitivity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "riskLevel": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "visible": {
            "type": "boolean",
            "readOnly": true
          },
          "dpiaExemption": {
            "type": "boolean"
          },
          "dpiaExemptionJustification": {
            "type": "string",
            "nullable": true
          },
          "workSpaceId": {
            "type": "integer",
            "format": "int32"
          },
          "referenceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingUpdateDtoJsonPatchDocument": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingUpdateDtoOperation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataProcessingUpdateDtoOperation": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataProtectionAuthorityDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "siteURL": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 3,
            "type": "string",
            "nullable": true
          },
          "address": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataRetentionRuleDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "readonly": {
            "type": "boolean"
          },
          "purposes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "dataProcessings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingLightDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 400,
            "type": "string"
          },
          "description": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "baseActiveOverride": {
            "type": "boolean"
          },
          "intermediateArchivingOverride": {
            "type": "boolean"
          },
          "destructionOverride": {
            "type": "boolean"
          },
          "baseActiveDescription": {
            "type": "string",
            "nullable": true
          },
          "baseActiveLegalBasis": {
            "type": "string",
            "nullable": true
          },
          "baseActiveRetentionDuration": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "intermediateArchivingLegalBasis": {
            "type": "string",
            "description": "Base légale",
            "nullable": true
          },
          "intermediateArchivingDescription": {
            "type": "string",
            "description": "Description du processus d'archivage",
            "nullable": true
          },
          "intermediateArchivingRetentionDuration": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "destructionDescription": {
            "type": "string",
            "nullable": true
          },
          "destructionLegalBasis": {
            "type": "string",
            "nullable": true
          },
          "dataSetSource": {
            "$ref": "#/components/schemas/DataSetSource"
          },
          "sourceDescription": {
            "type": "string",
            "nullable": true
          },
          "dataFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataFieldDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataRetentionRuleDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRetentionRuleDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataRetentionRuleUpdateDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "readonly": {
            "type": "boolean"
          },
          "purposes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "dataProcessings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingLightDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 400,
            "type": "string"
          },
          "description": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "baseActiveOverride": {
            "type": "boolean"
          },
          "intermediateArchivingOverride": {
            "type": "boolean"
          },
          "destructionOverride": {
            "type": "boolean"
          },
          "baseActiveDescription": {
            "type": "string",
            "nullable": true
          },
          "baseActiveLegalBasis": {
            "type": "string",
            "nullable": true
          },
          "baseActiveRetentionDuration": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "intermediateArchivingLegalBasis": {
            "type": "string",
            "description": "Base légale",
            "nullable": true
          },
          "intermediateArchivingDescription": {
            "type": "string",
            "description": "Description du processus d'archivage",
            "nullable": true
          },
          "intermediateArchivingRetentionDuration": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "destructionDescription": {
            "type": "string",
            "nullable": true
          },
          "destructionLegalBasis": {
            "type": "string",
            "nullable": true
          },
          "dataSetSource": {
            "$ref": "#/components/schemas/DataSetSource"
          },
          "sourceDescription": {
            "type": "string",
            "nullable": true
          },
          "dataFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataFieldDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataSetSource": {
        "enum": [
          "Direct",
          "Indirect",
          "DirectAndIndirect"
        ],
        "type": "string"
      },
      "DataSubjectAttachmentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "nbDownload": {
            "type": "integer",
            "format": "int32"
          },
          "transmitted": {
            "type": "boolean"
          },
          "fileName": {
            "maxLength": 355,
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "userRequestMessageId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "userRequestId": {
            "type": "integer",
            "format": "int32"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateLastDownload": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateFileRemoved": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "expired": {
            "type": "boolean",
            "readOnly": true
          },
          "color": {
            "maxLength": 12,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "DataSubjectDataProcessingSetStateDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataSubjectExportQuery": {
        "type": "object",
        "properties": {
          "useNativeColumn": {
            "type": "boolean"
          },
          "cols": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "overtaking": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "q": {
            "type": "string",
            "nullable": true
          },
          "widgetId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workflows": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectRequestState"
            },
            "nullable": true
          },
          "purposes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectPurposeType"
            },
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "select": {
            "type": "string",
            "description": "Comma separated list of fields",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of the result page (default: 20, max 500)",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sortBy": {
            "type": "string",
            "description": "The field to sort",
            "nullable": true
          },
          "asc": {
            "type": "boolean",
            "description": "True to sort ascending"
          },
          "filters": {
            "type": "string",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataSubjectMessageCreationDto": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectAttachmentDto"
            },
            "nullable": true
          },
          "message": {
            "maxLength": 3000,
            "type": "string"
          },
          "dataSubjectRequestId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataSubjectMessageDto": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "nullable": true
          },
          "message": {
            "maxLength": 3000,
            "type": "string"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateSend": {
            "type": "string",
            "format": "date-time"
          },
          "dateViewed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "userRequestId": {
            "type": "integer",
            "format": "int32"
          },
          "attachmentsLifetimeInHours": {
            "type": "integer",
            "description": "Secured attachment lifetime for client\r\nDefault : 7 days",
            "format": "int32",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectAttachmentDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataSubjectMessageDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectMessageDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataSubjectPurposeType": {
        "enum": [
          "Unknown",
          "Information",
          "Access",
          "Rectification",
          "Erasure",
          "Restriction",
          "Opposition",
          "Portability",
          "AdvanceDirectives",
          "AutomatedDecision"
        ],
        "type": "string"
      },
      "DataSubjectRequestDataProcessingDto": {
        "type": "object",
        "properties": {
          "dateNotification": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/DataSubjectRequestDataProcessingState"
          },
          "processor": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "dataProcessingId": {
            "type": "string",
            "format": "uuid"
          },
          "dataSubjectRequestId": {
            "type": "integer",
            "format": "int32"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateNotificationSent": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data subject request data processing dto"
      },
      "DataSubjectRequestDataProcessingState": {
        "enum": [
          "New",
          "Pending",
          "Done",
          "NotNecessary"
        ],
        "type": "string"
      },
      "DataSubjectRequestDto": {
        "required": [
          "areaId",
          "locale",
          "purposes",
          "title"
        ],
        "type": "object",
        "properties": {
          "closedByUser": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "area": {
            "$ref": "#/components/schemas/AreaDto"
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "operator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "operatorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectAttachmentDto"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "locale": {
            "maxLength": 10,
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "personCategory": {
            "$ref": "#/components/schemas/PersonCategoryType"
          },
          "complex": {
            "type": "boolean",
            "description": "Wether it's a complex demand or not"
          },
          "dateClosed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "$ref": "#/components/schemas/DataSubjectRequestState"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "resolutionMessage": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 60,
            "type": "string",
            "nullable": true
          },
          "givenName": {
            "maxLength": 180,
            "type": "string",
            "nullable": true
          },
          "familyName": {
            "maxLength": 180,
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "workFlowStep": {
            "$ref": "#/components/schemas/WorkFlowStepDto"
          },
          "workFlowStepId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "channel": {
            "$ref": "#/components/schemas/DataSubjectRequestSource"
          },
          "refId": {
            "maxLength": 355,
            "type": "string",
            "nullable": true
          },
          "userId": {
            "maxLength": 355,
            "type": "string",
            "nullable": true
          },
          "purposes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectPurposeType"
            },
            "description": "Purposes"
          },
          "closedReason": {
            "$ref": "#/components/schemas/ClosedReason"
          },
          "closedReasonDescription": {
            "type": "string",
            "nullable": true
          },
          "expiryTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "address": {
            "maxLength": 350,
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 8,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 2,
            "type": "string",
            "nullable": true
          },
          "nbMessages": {
            "type": "integer",
            "format": "int32"
          },
          "nbMessagesNotViewed": {
            "type": "integer",
            "format": "int32"
          },
          "remainingDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "closingTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "additionalDatas": {
            "nullable": true
          },
          "userNotified": {
            "type": "boolean"
          },
          "dateUserNotified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sendNotification": {
            "type": "boolean"
          },
          "emailValidationDate": {
            "type": "string",
            "format": "date-time"
          },
          "mailValidated": {
            "type": "boolean"
          },
          "referrerUrl": {
            "type": "string",
            "nullable": true
          },
          "demandId": {
            "type": "string",
            "nullable": true
          },
          "identityValidated": {
            "type": "boolean",
            "readOnly": true
          },
          "dateIdentityValidated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "widgetId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataSubjectRequestDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectRequestDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataSubjectRequestLightDto": {
        "required": [
          "areaId",
          "locale",
          "purposes",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "locale": {
            "maxLength": 10,
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "archivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "personCategory": {
            "$ref": "#/components/schemas/PersonCategoryType"
          },
          "complex": {
            "type": "boolean",
            "description": "Wether it's a complex demand or not"
          },
          "dateClosed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "$ref": "#/components/schemas/DataSubjectRequestState"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "resolutionMessage": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 60,
            "type": "string",
            "nullable": true
          },
          "givenName": {
            "maxLength": 180,
            "type": "string",
            "nullable": true
          },
          "familyName": {
            "maxLength": 180,
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "workFlowStep": {
            "$ref": "#/components/schemas/WorkFlowStepDto"
          },
          "workFlowStepId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "channel": {
            "$ref": "#/components/schemas/DataSubjectRequestSource"
          },
          "refId": {
            "maxLength": 355,
            "type": "string",
            "nullable": true
          },
          "userId": {
            "maxLength": 355,
            "type": "string",
            "nullable": true
          },
          "purposes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectPurposeType"
            },
            "description": "Purposes"
          },
          "closedReason": {
            "$ref": "#/components/schemas/ClosedReason"
          },
          "closedReasonDescription": {
            "type": "string",
            "nullable": true
          },
          "expiryTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "address": {
            "maxLength": 350,
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 8,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 2,
            "type": "string",
            "nullable": true
          },
          "nbMessages": {
            "type": "integer",
            "format": "int32"
          },
          "nbMessagesNotViewed": {
            "type": "integer",
            "format": "int32"
          },
          "remainingDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "closingTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "additionalDatas": {
            "nullable": true
          },
          "userNotified": {
            "type": "boolean"
          },
          "dateUserNotified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sendNotification": {
            "type": "boolean"
          },
          "emailValidationDate": {
            "type": "string",
            "format": "date-time"
          },
          "mailValidated": {
            "type": "boolean"
          },
          "referrerUrl": {
            "type": "string",
            "nullable": true
          },
          "demandId": {
            "type": "string",
            "nullable": true
          },
          "identityValidated": {
            "type": "boolean",
            "readOnly": true
          },
          "dateIdentityValidated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "widgetId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataSubjectRequestPublicDto": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Subject's message (html is not authorized)",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Subject's email",
            "format": "email"
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "familyName": {
            "type": "string",
            "nullable": true
          },
          "refId": {
            "type": "string",
            "description": "A specific identifier provided by the customer (Reservation number, Social security number, identity card number....)",
            "nullable": true
          },
          "purpose": {
            "$ref": "#/components/schemas/DataSubjectPurposeType"
          },
          "personCategory": {
            "$ref": "#/components/schemas/PersonCategoryType"
          },
          "additionalDatas": {
            "description": "A dynamic object containing specific key value pairs (for custom fields for example)",
            "nullable": true
          },
          "referrer": {
            "type": "string",
            "description": "The source url or chain in order to track the source of the request (debugging purpose)",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "A userId provided by the js SDK if he is in an authentified environment",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataSubjectRequestSource": {
        "enum": [
          "Internal",
          "Form",
          "Widget",
          "POP3",
          "IMAP",
          "Import",
          "Zapier",
          "IncomingEmail"
        ],
        "type": "string"
      },
      "DataSubjectRequestState": {
        "enum": [
          "Open",
          "IdentityValidation",
          "Processing",
          "Active",
          "Closed"
        ],
        "type": "string"
      },
      "DataSubjectSerieValue": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "nullable": true
          },
          "y": {
            "type": "integer",
            "format": "int32"
          },
          "x": {
            "type": "number",
            "description": "Date in unix timestamp (milliseconds)",
            "format": "double",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataSubjectStatsDto": {
        "type": "object",
        "properties": {
          "nbCustomerRequests": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nbOpenedOrActiveCustomerRequests": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nbOverTaken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "averageTimeToClose": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "purposeTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChartSerieValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "timeSerie": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectSerieValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "stats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectStatValueDto"
            },
            "nullable": true,
            "readOnly": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataSubjectStatValueDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/DataSubjectRequestState"
          },
          "workFlowStep": {
            "$ref": "#/components/schemas/WorkFlowStepDto"
          },
          "complex": {
            "type": "boolean"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "expiryTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateClosed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "purposes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectPurposeType"
            },
            "nullable": true
          },
          "remainingDays": {
            "type": "integer",
            "format": "int32"
          },
          "daysToClose": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataSubjectWidgetCustomType": {
        "enum": [
          "InputText",
          "InputTextarea",
          "InputRadio",
          "InputSelect"
        ],
        "type": "string",
        "description": "Test"
      },
      "DataSubjectWidgetField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/DataSubjectWidgetFieldType"
          },
          "personCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonTypeItem"
            },
            "nullable": true
          },
          "defaultValue": {
            "type": "string",
            "nullable": true
          },
          "hidden": {
            "type": "boolean"
          },
          "required": {
            "type": "boolean"
          },
          "min": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "customType": {
            "$ref": "#/components/schemas/DataSubjectWidgetCustomType"
          },
          "customSlug": {
            "type": "string",
            "nullable": true
          },
          "customLabel": {
            "type": "string",
            "nullable": true
          },
          "customOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "fieldType": {
            "$ref": "#/components/schemas/DataSubjectWidgetCustomType"
          },
          "slug": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Data subject widget field"
      },
      "DataSubjectWidgetFieldType": {
        "enum": [
          "RefId",
          "Message",
          "PhoneNumber",
          "GivenName",
          "FamilyName",
          "ZipCode",
          "City",
          "CountryCode",
          "Address",
          "PersonCategory",
          "CustomField"
        ],
        "type": "string"
      },
      "DataSubjectWidgetSettingPublicDto": {
        "required": [
          "colorPrimary",
          "label"
        ],
        "type": "object",
        "properties": {
          "lang": {
            "type": "string",
            "nullable": true
          },
          "area": {
            "$ref": "#/components/schemas/AreaDto"
          },
          "translation": {
            "$ref": "#/components/schemas/DataSubjectWidgetTranslation"
          },
          "label": {
            "maxLength": 250,
            "type": "string"
          },
          "noMailValidation": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "customCSS": {
            "type": "string",
            "description": "Custom css styles appended automatically",
            "nullable": true
          },
          "layout": {
            "$ref": "#/components/schemas/Layout"
          },
          "purposeSelection": {
            "$ref": "#/components/schemas/PurposeSelection"
          },
          "allowedPurposes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectPurposeType"
            },
            "nullable": true
          },
          "colorPrimary": {
            "maxLength": 12,
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "type": "string"
          },
          "colorText": {
            "maxLength": 12,
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "type": "string",
            "nullable": true
          },
          "iconLayout": {
            "$ref": "#/components/schemas/IconLayout"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSubjectWidgetField"
            },
            "description": "Field ids to display",
            "nullable": true
          },
          "callBackSuccessUrl": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          },
          "callBackErrorUrl": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          },
          "fontFamily": {
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "privacyPolicyUrl": {
            "maxLength": 300,
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataSubjectWidgetTranslation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "lang": {
            "type": "string",
            "nullable": true
          },
          "pageTitle": {
            "type": "string",
            "nullable": true
          },
          "disclaimer": {
            "type": "string",
            "nullable": true
          },
          "messageSuccess": {
            "type": "string",
            "nullable": true
          },
          "mailConfirmationContent": {
            "type": "string",
            "nullable": true
          },
          "mailConfirmationSubject": {
            "type": "string",
            "nullable": true
          },
          "noPurposeTitle": {
            "type": "string",
            "nullable": true
          },
          "purposeChange": {
            "type": "string",
            "nullable": true
          },
          "purposeTitle": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "purposeDisclaimer": {
            "type": "string",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "familyName": {
            "type": "string",
            "nullable": true
          },
          "refId": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "personCategory": {
            "type": "string",
            "nullable": true
          },
          "submit": {
            "type": "string",
            "nullable": true
          },
          "legalText": {
            "type": "string",
            "nullable": true
          },
          "privacyPolicy": {
            "type": "string",
            "nullable": true
          },
          "purposeSubmitted": {
            "type": "string",
            "nullable": true
          },
          "purposeSubmittedDesc": {
            "type": "string",
            "nullable": true
          },
          "purposeAccessTitle": {
            "type": "string",
            "nullable": true
          },
          "purposeAccessDesc": {
            "type": "string",
            "nullable": true
          },
          "purposePortabilityTitle": {
            "type": "string",
            "nullable": true
          },
          "purposePortabilityDesc": {
            "type": "string",
            "nullable": true
          },
          "purposeUnknownTitle": {
            "type": "string",
            "nullable": true
          },
          "purposeUnknownDesc": {
            "type": "string",
            "nullable": true
          },
          "purposeInformationTitle": {
            "type": "string",
            "nullable": true
          },
          "purposeInformationDesc": {
            "type": "string",
            "nullable": true
          },
          "purposeRectificationTitle": {
            "type": "string",
            "nullable": true
          },
          "purposeRectificationDesc": {
            "type": "string",
            "nullable": true
          },
          "purposeOppositionTitle": {
            "type": "string",
            "nullable": true
          },
          "purposeOppositionDesc": {
            "type": "string",
            "nullable": true
          },
          "purposeErasureTitle": {
            "type": "string",
            "nullable": true
          },
          "purposeErasureDesc": {
            "type": "string",
            "nullable": true
          },
          "purposeRestrictionTitle": {
            "type": "string",
            "nullable": true
          },
          "purposeRestrictionDesc": {
            "type": "string",
            "nullable": true
          },
          "purposeAdvanceDirectivesTitle": {
            "type": "string",
            "nullable": true
          },
          "purposeAdvanceDirectivesDesc": {
            "type": "string",
            "nullable": true
          },
          "purposeAutomatedDecisionTitle": {
            "type": "string",
            "nullable": true
          },
          "purposeAutomatedDecisionDesc": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataTableColumn": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "selectable": {
            "type": "boolean"
          },
          "sortable": {
            "type": "boolean"
          },
          "filterable": {
            "type": "boolean"
          },
          "selected": {
            "type": "boolean"
          },
          "defaultSelected": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValueItem"
            },
            "nullable": true
          },
          "layout": {
            "type": "string",
            "description": "Layout type for displaying purpose in the client app\r\nProgressBar",
            "nullable": true
          },
          "boolReverse": {
            "type": "boolean",
            "description": "Wether it's reversed or not (if true, the label is red and if green)"
          },
          "subPropertyToDisplay": {
            "type": "string",
            "nullable": true
          },
          "sortByColumn": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "propertyToFilter": {
            "type": "string",
            "description": "The name of the property to filter",
            "nullable": true
          },
          "selectLabel": {
            "type": "string",
            "nullable": true
          },
          "additionalParams": {
            "type": "string",
            "nullable": true
          },
          "selectType": {
            "$ref": "#/components/schemas/SelectType"
          },
          "objectType": {
            "$ref": "#/components/schemas/LogObjectType"
          },
          "isNullable": {
            "type": "boolean"
          },
          "isDate": {
            "type": "boolean"
          },
          "isNumeric": {
            "type": "boolean"
          },
          "dateUtc": {
            "type": "boolean",
            "readOnly": true
          },
          "includes": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "subPropertyToFilter": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataTransferAggregatedDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "destination": {
            "type": "string",
            "nullable": true
          },
          "origin": {
            "$ref": "#/components/schemas/OriginDto"
          },
          "isAdequateCountry": {
            "type": "boolean",
            "readOnly": true
          },
          "isEuropeanUnionCountry": {
            "type": "boolean",
            "readOnly": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecipientTransferDto"
            },
            "nullable": true
          },
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataTransfersDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferExtendedDto"
            },
            "nullable": true
          },
          "groupedTransfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataTransferAggregatedDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DevelopmentType": {
        "enum": [
          "InHouse",
          "OutSourced"
        ],
        "type": "string"
      },
      "EnumValueItem": {
        "type": "object",
        "properties": {
          "headline": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "valueText": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "valueId": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExportAuditTemplateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ExportFormat": {
        "enum": [
          "csv",
          "xlsx",
          "json",
          "pdf",
          "docx",
          "html"
        ],
        "type": "string"
      },
      "ExportRiskAssetFilter": {
        "type": "object",
        "properties": {
          "objectType": {
            "$ref": "#/components/schemas/RiskObjectType"
          },
          "cols": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "useNativeColumn": {
            "type": "boolean"
          },
          "sortBy": {
            "type": "string",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of the result page (default: 20, max 500)",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "asc": {
            "type": "boolean",
            "description": "True to sort ascending"
          },
          "filters": {
            "type": "string",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Features": {
        "type": "object",
        "properties": {
          "cookieWidget": {
            "type": "boolean"
          },
          "workspaceCredit": {
            "type": "integer",
            "format": "int32"
          },
          "userCredit": {
            "type": "integer",
            "format": "int32"
          },
          "mbytesAttachmentCredit": {
            "type": "integer",
            "format": "int32"
          },
          "logCredit": {
            "type": "integer",
            "format": "int32"
          },
          "workflowRuleCredit": {
            "type": "integer",
            "format": "int32"
          },
          "customFieldCredit": {
            "type": "integer",
            "format": "int32"
          },
          "cookieWidgetCredit": {
            "type": "integer",
            "format": "int32"
          },
          "legalClaimWidgetCredit": {
            "type": "integer",
            "format": "int32"
          },
          "dataProcessingCredit": {
            "type": "integer",
            "format": "int32"
          },
          "cartography": {
            "type": "boolean"
          },
          "dataSubject": {
            "type": "boolean"
          },
          "dataBreach": {
            "type": "boolean"
          },
          "riskManagement": {
            "type": "boolean"
          },
          "documentGeneration": {
            "type": "boolean"
          },
          "audit": {
            "type": "boolean"
          },
          "advancedPersonalization": {
            "type": "boolean"
          },
          "sso": {
            "type": "boolean"
          },
          "advancedSecurity": {
            "type": "boolean"
          },
          "record": {
            "type": "boolean"
          },
          "taskManagement": {
            "type": "boolean"
          },
          "fileManagement": {
            "type": "boolean"
          },
          "recordExport": {
            "type": "boolean"
          },
          "auditExport": {
            "type": "boolean"
          },
          "workflow": {
            "type": "boolean"
          },
          "customField": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Features restrictions"
      },
      "FileType": {
        "enum": [
          "Upload",
          "GeneratedContract",
          "Markdown"
        ],
        "type": "string"
      },
      "GenerateActionPlanDto": {
        "required": [
          "areaId",
          "responseId",
          "tasks"
        ],
        "type": "object",
        "properties": {
          "responseId": {
            "type": "string",
            "format": "uuid"
          },
          "newProject": {
            "type": "boolean",
            "nullable": true
          },
          "projectName": {
            "type": "string",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditRelatedTask"
            }
          }
        },
        "additionalProperties": false
      },
      "GenericDataType": {
        "enum": [
          "String",
          "Number",
          "UniqueIdentifier",
          "Date",
          "Object",
          "Document",
          "Matrix",
          "Geolocation"
        ],
        "type": "string"
      },
      "GenericRelationShipCreationDto": {
        "required": [
          "originId"
        ],
        "type": "object",
        "properties": {
          "reverse": {
            "type": "boolean"
          },
          "targetType": {
            "$ref": "#/components/schemas/RelationShipObjectType"
          },
          "targetIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "originType": {
            "$ref": "#/components/schemas/RelationShipObjectType"
          },
          "originId": {
            "maxLength": 120,
            "type": "string",
            "description": "Origin id"
          },
          "label": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 3500,
            "type": "string",
            "nullable": true
          },
          "create": {
            "type": "boolean"
          },
          "newLabel": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GenericRelationShipLinkedObjectDto": {
        "required": [
          "originId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "target": {
            "$ref": "#/components/schemas/GenericRelationshipObject"
          },
          "reverse": {
            "type": "boolean"
          },
          "originType": {
            "$ref": "#/components/schemas/RelationShipObjectType"
          },
          "originId": {
            "maxLength": 120,
            "type": "string",
            "description": "Origin id"
          },
          "label": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 3500,
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          }
        },
        "additionalProperties": false,
        "description": "Generic relationship"
      },
      "GenericRelationshipObject": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/RelationShipObjectType"
          },
          "deleted": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GroupTasksDto": {
        "type": "object",
        "properties": {
          "workflowStepId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GuidDataBreachDtoBatchPatchDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "patch": {
            "$ref": "#/components/schemas/DataBreachDtoJsonPatchDocument"
          }
        },
        "additionalProperties": false
      },
      "GuidDataProcessingUpdateDtoBatchPatchDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "patch": {
            "$ref": "#/components/schemas/DataProcessingUpdateDtoJsonPatchDocument"
          }
        },
        "additionalProperties": false
      },
      "GuidWorkflowUpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "stepId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "HostingType": {
        "enum": [
          "InHouse",
          "OutSourced"
        ],
        "type": "string"
      },
      "IconLayout": {
        "enum": [
          "Standard",
          "Small",
          "None"
        ],
        "type": "string"
      },
      "ImpactScore": {
        "enum": [
          "VeryLow",
          "Low",
          "Medium",
          "High",
          "VeryHigh"
        ],
        "type": "string"
      },
      "InsightType": {
        "enum": [
          "Progression",
          "Quality",
          "Sensitivity"
        ],
        "type": "string"
      },
      "Int32ActorDtoBatchPatchDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "patch": {
            "$ref": "#/components/schemas/ActorDtoJsonPatchDocument"
          }
        },
        "additionalProperties": false
      },
      "Int32SortQueryDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "nextId": {
            "type": "integer",
            "format": "int32"
          },
          "prevId": {
            "type": "integer",
            "format": "int32"
          },
          "parentId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Int32WorkflowUpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "stepId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "InvitationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "workspaceId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workspace": {
            "$ref": "#/components/schemas/WorkSpaceDto"
          },
          "invitedUser": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "creatorUser": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "welcomeMessage": {
            "type": "string",
            "description": "We perform html clean up here because the welcomeHtml is html rendered",
            "nullable": true
          },
          "dateExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateValidation": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isValidated": {
            "type": "boolean",
            "readOnly": true
          },
          "isExpired": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "IRecordNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "objectId": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "linkTooltip": {
            "type": "string",
            "nullable": true
          },
          "dangers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeDanger"
            },
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/DataProcessingNodeType"
          }
        },
        "additionalProperties": false
      },
      "IRecordRelationShip": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "targetId": {
            "type": "string",
            "nullable": true
          },
          "targetType": {
            "$ref": "#/components/schemas/DataProcessingNodeType"
          },
          "source": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "sourceId": {
            "type": "string",
            "nullable": true
          },
          "sourceType": {
            "$ref": "#/components/schemas/DataProcessingNodeType"
          },
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tooltip": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IterationDto": {
        "required": [
          "end",
          "label",
          "start"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 100,
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "done": {
            "type": "boolean",
            "readOnly": true
          },
          "current": {
            "type": "boolean",
            "readOnly": true
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "JobTitle": {
        "enum": [
          "Other",
          "JointController",
          "DataProtectionOfficerRepresentative",
          "DataController",
          "DataProtectionOfficer",
          "ProcessImplementationManager",
          "Processor",
          "DataControllerRepresentative",
          "Referent",
          "ChiefInformationSecurityOfficer"
        ],
        "type": "string",
        "description": "Job title"
      },
      "Layout": {
        "enum": [
          "block",
          "popup",
          "page"
        ],
        "type": "string"
      },
      "LegalBasis": {
        "enum": [
          "Consent",
          "Contract",
          "LegalCommitment",
          "SafeGuardVitalInterest",
          "PublicInterest",
          "LegitimateInterest",
          "Other"
        ],
        "type": "string"
      },
      "LicenceType": {
        "enum": [
          "PaidSubscription",
          "Basic",
          "Advanced",
          "Custom",
          "Trial"
        ],
        "type": "string",
        "description": "Type of licence\r\nNot used yet..."
      },
      "LogDto": {
        "type": "object",
        "properties": {
          "data": {
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "objectType": {
            "$ref": "#/components/schemas/LogObjectType"
          },
          "isDeletion": {
            "type": "boolean"
          },
          "channel": {
            "$ref": "#/components/schemas/NotificationChannel"
          },
          "refId": {
            "type": "string",
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogRecipientDto"
            },
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "workSpaceId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "dateUserViewed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateNotificationSent": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sendNotification": {
            "type": "boolean"
          },
          "workSpace": {
            "$ref": "#/components/schemas/WorkSpaceDto"
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogHistoryItem": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "La table de log stockera toutes les infos sur les types d'opérations passés, les opérateurs... \r\nL'idée est de savoir en temps réel qui à fait quoi sur l'outil. A voir si on ne peut pas implémenter un signalR pour pusher la notif en live sur le site."
      },
      "LogObjectType": {
        "enum": [
          "Comment",
          "DataProcessing",
          "DataSubject",
          "CookieWidget",
          "DataBreach",
          "Task",
          "Attachment",
          "Customer",
          "Actor",
          "User",
          "DataSet",
          "DataRetentionRule",
          "Tag",
          "Vendor",
          "Asset",
          "WorkflowStep",
          "SecurityMeasure",
          "Team",
          "Role",
          "ArchivingPolicy",
          "DataField",
          "AuditLog",
          "DataSubjectMessage",
          "Iteration",
          "Project",
          "Risk",
          "DataProtectionAuthority",
          "AuditTemplate",
          "AuditResponse",
          "Area",
          "DataSubjectWidgetSetting",
          "Purpose",
          "CustomField",
          "MailReporting",
          "None",
          "RiskEvaluation",
          "RiskCategory",
          "ControlPoint",
          "RiskAsset",
          "GenericRelation",
          "Contribution",
          "RiskThreat"
        ],
        "type": "string"
      },
      "LogPriority": {
        "enum": [
          "High",
          "Medium",
          "Low"
        ],
        "type": "string"
      },
      "LogRecipientDto": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "dateRead": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateDelivery": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "MaintenanceType": {
        "enum": [
          "InHouse",
          "OutSourced"
        ],
        "type": "string"
      },
      "MatrixColumn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "rateCompletion": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "rateScore": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "owners": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/AuditResponseState"
          },
          "publishedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatrixRow": {
        "type": "object",
        "properties": {
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "rateCompletion": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "rateScore": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "totalCompletion": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "totalScore": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "totalMaxScore": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatrixValue"
            },
            "nullable": true
          },
          "nbQuestions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MatrixValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "risk": {
            "type": "number",
            "format": "double"
          },
          "complete": {
            "type": "integer",
            "format": "int32"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "response": {
            "$ref": "#/components/schemas/AuditResponseItem"
          },
          "responseString": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MetaData": {
        "type": "object",
        "properties": {
          "typeMetaDataId": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A meta data stored in article"
      },
      "NativeIntegrationType": {
        "enum": [
          "GoogleDrive",
          "OneDrive",
          "Dastra",
          "Incomingmail"
        ],
        "type": "string"
      },
      "NoCommunicationReason": {
        "enum": [
          "ImpossibleToRecover",
          "HighRiskImpossible"
        ],
        "type": "string"
      },
      "NodeDanger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/LogObjectType"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NotificationChannel": {
        "enum": [
          "ProcessingCreation",
          "ProcessingModification",
          "ProcessingStateChange",
          "DataSubjectCreation",
          "DataSubjectUpdate",
          "DataSubjectStateChange",
          "DataBreachCreation",
          "DataBreachModification",
          "TaskCreation",
          "TaskEdit",
          "CookieWidget",
          "TaskChangeState",
          "CommentNew",
          "ProcessingArchived",
          "DataSubjectArchived",
          "DataBreachArchived",
          "DataBreachChangeState",
          "ProcessingAddRelation",
          "ProcessingRemoveRelation",
          "UserSession",
          "UserInvited",
          "UserRevoked",
          "PermissionChange",
          "WorkspaceDeleted",
          "OwnerAdded",
          "OwnerDeleted",
          "UserLogin",
          "DataSubjectWidgetCreation",
          "DataSubjectMessage",
          "UserDeleted",
          "ProcessingDeleted",
          "DataSubjectIdentityValidated",
          "UserMaxLoginAttempts",
          "TaskMention",
          "CommentMention",
          "AuditResponseRefused",
          "AuditResponseValidated",
          "AuditResponseUpdated",
          "AuditResponseFinalized",
          "AuditResponseActionPlanGenerated",
          "AuditResponsePlanified",
          "AuditResponseInvitation",
          "AuditAnnotationAdded",
          "AuditAnnotationChangeState",
          "ReportingNewsletter",
          "PushNotificationOptinMessage",
          "TaskAssigned",
          "AuditTemplateUpdated",
          "AuditTemplateCreated",
          "AddGenericRelation",
          "RemoveGenericRelation",
          "TicketStatusChanged",
          "RiskEvaluationCreated",
          "RiskEvaluationUpdated",
          "RiskEvaluationSwitchState",
          "ControlPointCreated",
          "ControlPointUpdated",
          "AuditAnnotationMentioned",
          "ProcessingPublished",
          "ReplicationJobSuccess",
          "ReplicationJobFailed",
          "ProcessingDraft",
          "ContributionAccepted",
          "ContributionRejected",
          "DataSubjectRequestProcessed",
          "DataSubjectMessageAssigned",
          "ProcessingInvitation",
          "ProcessingExpired",
          "AuditResponseExpired",
          "DataBreachExpired",
          "TaskArchived"
        ],
        "type": "string",
        "description": "Channel for notifications and logs"
      },
      "ObjectArrayChartSerieDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "array",
              "items": { }
            },
            "nullable": true
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "yAxis": {
            "type": "integer",
            "format": "int32"
          },
          "cumulative": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "fillColor": {
            "type": "string",
            "nullable": true
          },
          "fillOpacity": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Operation": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OriginDto": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PartnerCategoryType": {
        "enum": [
          "Training",
          "ExternalDPO",
          "Consulting",
          "Lawyer",
          "SoftwarePublisher",
          "SystemIntegrator",
          "Accounting",
          "Finance",
          "HumanRessources",
          "Reseller",
          "CMP"
        ],
        "type": "string"
      },
      "PartnerDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "descriptionShort": {
            "type": "string",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "websiteUrl": {
            "type": "string",
            "nullable": true
          },
          "contentHtml": {
            "type": "string",
            "nullable": true
          },
          "contentMarkdown": {
            "type": "string",
            "nullable": true
          },
          "primaryColor": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerCategoryType"
            },
            "nullable": true
          },
          "languages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerLanguageType"
            },
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "linkedin": {
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "creator": {
            "$ref": "#/components/schemas/UserDto"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "A Dastra Partner"
      },
      "PartnerDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PartnerLanguageType": {
        "enum": [
          "French",
          "English",
          "Spanish",
          "Italian",
          "German",
          "Dutch",
          "Arabic",
          "Chinese"
        ],
        "type": "string"
      },
      "PermissionWorkspaceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "workSpaceId": {
            "type": "integer",
            "format": "int32"
          },
          "shortName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PersonalDataCategory": {
        "enum": [
          "CivilStatus",
          "PersonalLife",
          "ProfessionalLife",
          "EconomicFinancialData",
          "ConnectionData",
          "GeoLocationData",
          "InternetData",
          "EthnicalData",
          "PoliticalOpinions",
          "ReligiousBeliefs",
          "TradeUnionMembership",
          "GeneticData",
          "BiometricData",
          "HealthData",
          "SexualOrientations",
          "CriminalConvictions",
          "CriminalData",
          "Other",
          "NIR"
        ],
        "type": "string"
      },
      "PersonCategoryType": {
        "enum": [
          "Prospect",
          "Client",
          "FormerClient",
          "ParticularPerson",
          "Employee",
          "Candidate",
          "ExternalProvider",
          "ExternalServiceProvider",
          "Other",
          "TemporaryWorker",
          "Agent",
          "ElectedRepresentative",
          "PublicServiceUser",
          "Visitors",
          "OldEmployee",
          "EndUsers",
          "Citizen",
          "Patient",
          "HealthProfessional",
          "Students",
          "AgedPeople",
          "Member",
          "Beneficiary",
          "Child",
          "InternetUsers"
        ],
        "type": "string"
      },
      "PersonTypeItem": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/PersonCategoryType"
          }
        },
        "additionalProperties": false
      },
      "PricingPlan": {
        "type": "object",
        "properties": {
          "stripePlanId": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "userCredit": {
            "type": "integer",
            "format": "int32"
          },
          "mbytesAttachmentCredit": {
            "type": "integer",
            "format": "int32"
          },
          "logCredit": {
            "type": "integer",
            "format": "int32"
          },
          "cookieWidgetCredit": {
            "type": "integer",
            "format": "int32"
          },
          "legalClaimWidgetCredit": {
            "type": "integer",
            "format": "int32"
          },
          "dataProcessingCredit": {
            "type": "integer",
            "format": "int32"
          },
          "workflowRuleCredit": {
            "type": "integer",
            "format": "int32"
          },
          "customFieldCredit": {
            "type": "integer",
            "format": "int32"
          },
          "cookieWidget": {
            "type": "boolean"
          },
          "cartography": {
            "type": "boolean"
          },
          "dataSubject": {
            "type": "boolean"
          },
          "dataBreach": {
            "type": "boolean"
          },
          "riskManagement": {
            "type": "boolean"
          },
          "documentGeneration": {
            "type": "boolean"
          },
          "audit": {
            "type": "boolean"
          },
          "advancedPersonalization": {
            "type": "boolean"
          },
          "record": {
            "type": "boolean"
          },
          "taskManagement": {
            "type": "boolean"
          },
          "fileManagement": {
            "type": "boolean"
          },
          "auditExport": {
            "type": "boolean"
          },
          "recordExport": {
            "type": "boolean"
          },
          "advancedSecurity": {
            "type": "boolean",
            "description": "Ip Filtering + Authentification forte"
          },
          "workflow": {
            "type": "boolean"
          },
          "sso": {
            "type": "boolean"
          },
          "customField": {
            "type": "boolean"
          },
          "trialOfferDays": {
            "type": "integer",
            "format": "int32"
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "licenceType": {
            "$ref": "#/components/schemas/LicenceType"
          },
          "priceForYearBilling": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "priceForMonthBilling": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "requiresQuote": {
            "type": "boolean"
          },
          "mostPopular": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Subscription's type with all default's quotas.\r\nIt defines the level of service\r\nThe package selected by the user"
      },
      "Priority": {
        "enum": [
          "High",
          "Medium",
          "Low"
        ],
        "type": "string"
      },
      "ProbabilityScore": {
        "enum": [
          "VeryLow",
          "Low",
          "Medium",
          "High",
          "VeryHigh"
        ],
        "type": "string"
      },
      "ProcessingState": {
        "enum": [
          "Study",
          "BeingDeployed",
          "InProduction",
          "Stopped"
        ],
        "type": "string"
      },
      "ProcessingType": {
        "enum": [
          "Default",
          "Vendor"
        ],
        "type": "string"
      },
      "ProgressionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "progression": {
            "type": "number",
            "format": "double"
          },
          "quality": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "sensitivity": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "insights": {
            "$ref": "#/components/schemas/DataProcessingInsightMessages"
          }
        },
        "additionalProperties": false
      },
      "ProjectDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "label": {
            "maxLength": 100,
            "type": "string"
          },
          "description": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "nbTasks": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PublicProfileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "familyName": {
            "type": "string",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "blogUrl": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          },
          "inTenant": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PurposeDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "key": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "legalBasis": {
            "$ref": "#/components/schemas/LegalBasis"
          },
          "legalBasisText": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "legalBasisDescription": {
            "type": "string",
            "nullable": true
          },
          "readonly": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Purpose DTO"
      },
      "PurposeSelection": {
        "enum": [
          "All",
          "Some",
          "None"
        ],
        "type": "string"
      },
      "RecipientTransferDto": {
        "type": "object",
        "properties": {
          "safeguardType": {
            "$ref": "#/components/schemas/SafeGuardType"
          },
          "safeguardTypeLabel": {
            "type": "string",
            "nullable": true
          },
          "typeLabel": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/RecipientType"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "RecipientType": {
        "enum": [
          "InternalService",
          "Vendor",
          "ThirdParty",
          "JointController",
          "DataSubject",
          "PublicOrganism",
          "InstitutionalPartner",
          "AuthorizedThirdParty"
        ],
        "type": "string"
      },
      "RecordNodes": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IRecordNode"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IRecordRelationShip"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelationShipObjectType": {
        "enum": [
          "Actor",
          "SecurityMeasure",
          "DataBreach",
          "Asset",
          "DataRetentionRule",
          "Risk"
        ],
        "type": "string"
      },
      "RelationShipType": {
        "enum": [
          "Child",
          "Parent",
          "Related",
          "HasDuplicate",
          "DuplicateOf",
          "Master",
          "Slave",
          "Inheritor",
          "Tutor"
        ],
        "type": "string"
      },
      "ReplicationResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "id": {
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RiskAssetDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "ref": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/RiskObjectType"
          },
          "monitoredRisks": {
            "type": "integer",
            "format": "int32"
          },
          "totalRisks": {
            "type": "integer",
            "format": "int32"
          },
          "averageRiskInitial": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "averageRiskCurrent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "averageRiskResidual": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minRiskInitial": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxRiskInitial": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minRiskResidual": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxRiskResidual": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "highRiskInitial": {
            "type": "integer",
            "format": "int32"
          },
          "highRiskResidual": {
            "type": "integer",
            "format": "int32"
          },
          "averageResilience": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RiskCategoryDto": {
        "required": [
          "color",
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "color": {
            "maxLength": 9,
            "type": "string"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RiskCategoryGroupStat": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "averageResidual": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minResidual": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxResidual": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "averageInitial": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minInitial": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxInitial": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "averageCurrent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "minCurrent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxCurrent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RiskCategoryTreeDto": {
        "required": [
          "color",
          "label"
        ],
        "type": "object",
        "properties": {
          "root": {
            "type": "boolean"
          },
          "riskTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskTypeDto"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "color": {
            "maxLength": 9,
            "type": "string"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RiskEvaluationDto": {
        "required": [
          "riskId"
        ],
        "type": "object",
        "properties": {
          "object": {
            "$ref": "#/components/schemas/SelectListItemResource"
          },
          "state": {
            "$ref": "#/components/schemas/RiskEvaluationState"
          },
          "risk": {
            "$ref": "#/components/schemas/RiskTypeDto"
          },
          "owner": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateRetired": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateIdentification": {
            "type": "string",
            "format": "date-time"
          },
          "dateAssessment": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateResponse": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "riskInitial": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "riskResidual": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "impactResilience": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "probabilityResilience": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "resilience": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "riskCurrentPercentage": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "riskInitialPercentage": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "riskResidualPercentage": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "impactCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "probabilityCurrent": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "riskCurrent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "tasks": {
            "$ref": "#/components/schemas/TaskCounter"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "riskId": {
            "type": "string",
            "format": "uuid"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "objectType": {
            "$ref": "#/components/schemas/RiskObjectType"
          },
          "objectId": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 3500,
            "type": "string",
            "description": "Evaluation contains a description of the specific risk",
            "nullable": true
          },
          "ownerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "responseJustification": {
            "type": "string",
            "nullable": true
          },
          "assessementJustification": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "responseType": {
            "$ref": "#/components/schemas/RiskResponseType"
          },
          "impactInitial": {
            "maximum": 9,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "probabilityInitial": {
            "maximum": 9,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "impactResidual": {
            "maximum": 9,
            "minimum": 1,
            "type": "number",
            "description": "Response to risk",
            "format": "double",
            "nullable": true
          },
          "probabilityResidual": {
            "maximum": 9,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RiskEvaluationQuery": {
        "type": "object",
        "properties": {
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskEvaluationState"
            },
            "nullable": true
          },
          "objectType": {
            "$ref": "#/components/schemas/RiskObjectType"
          },
          "controlPointId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "objectId": {
            "type": "string",
            "nullable": true
          },
          "q": {
            "type": "string",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "riskIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "catIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "select": {
            "type": "string",
            "description": "Comma separated list of fields",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of the result page (default: 20, max 500)",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sortBy": {
            "type": "string",
            "description": "The field to sort",
            "nullable": true
          },
          "asc": {
            "type": "boolean",
            "description": "True to sort ascending"
          },
          "filters": {
            "type": "string",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RiskEvaluationState": {
        "enum": [
          "Assessment",
          "Response",
          "Treated",
          "Retired"
        ],
        "type": "string",
        "description": "Evaluation state"
      },
      "RiskEvaluationUpdateDto": {
        "required": [
          "riskId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "riskId": {
            "type": "string",
            "format": "uuid"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "objectType": {
            "$ref": "#/components/schemas/RiskObjectType"
          },
          "objectId": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 3500,
            "type": "string",
            "description": "Evaluation contains a description of the specific risk",
            "nullable": true
          },
          "ownerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "responseJustification": {
            "type": "string",
            "nullable": true
          },
          "assessementJustification": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "responseType": {
            "$ref": "#/components/schemas/RiskResponseType"
          },
          "impactInitial": {
            "maximum": 9,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "probabilityInitial": {
            "maximum": 9,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "impactResidual": {
            "maximum": 9,
            "minimum": 1,
            "type": "number",
            "description": "Response to risk",
            "format": "double",
            "nullable": true
          },
          "probabilityResidual": {
            "maximum": 9,
            "minimum": 1,
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RiskEventDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 250,
            "type": "string"
          },
          "descriptionHtml": {
            "type": "string",
            "nullable": true
          },
          "impactValue": {
            "type": "integer",
            "format": "int64"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "typeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/RiskTypeDto"
          }
        },
        "additionalProperties": false
      },
      "RiskEventDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskEventDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RiskHeatmapValue": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "format": "double"
          },
          "y": {
            "type": "number",
            "format": "double"
          },
          "z": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RiskIndicators": {
        "type": "object",
        "properties": {
          "nbRisks": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "riskGroupsResidual": {
            "type": "object",
            "properties": {
              "VeryLow": {
                "type": "integer",
                "format": "int32"
              },
              "Low": {
                "type": "integer",
                "format": "int32"
              },
              "Medium": {
                "type": "integer",
                "format": "int32"
              },
              "High": {
                "type": "integer",
                "format": "int32"
              },
              "VeryHigh": {
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false,
            "nullable": true,
            "readOnly": true
          },
          "riskGroupsCurrent": {
            "type": "object",
            "properties": {
              "VeryLow": {
                "type": "integer",
                "format": "int32"
              },
              "Low": {
                "type": "integer",
                "format": "int32"
              },
              "Medium": {
                "type": "integer",
                "format": "int32"
              },
              "High": {
                "type": "integer",
                "format": "int32"
              },
              "VeryHigh": {
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false,
            "nullable": true,
            "readOnly": true
          },
          "riskGroupsInitial": {
            "type": "object",
            "properties": {
              "VeryLow": {
                "type": "integer",
                "format": "int32"
              },
              "Low": {
                "type": "integer",
                "format": "int32"
              },
              "Medium": {
                "type": "integer",
                "format": "int32"
              },
              "High": {
                "type": "integer",
                "format": "int32"
              },
              "VeryHigh": {
                "type": "integer",
                "format": "int32"
              }
            },
            "additionalProperties": false,
            "nullable": true,
            "readOnly": true
          },
          "riskCategoryGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskCategoryGroupStat"
            },
            "nullable": true,
            "readOnly": true
          },
          "treatedRisks": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "monitoredRisks": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "heatmapInitial": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskHeatmapValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "heatmapResidual": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskHeatmapValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "pendingAssessmentRisks": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "pendingResponseRisks": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "averageResilience": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "averageRiskResidual": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "averageRiskInitial": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "averageRiskCurrent": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "averageRiskInitialRate": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "averageRiskResidualRate": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "averageRiskCurrentRate": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RiskObjectType": {
        "enum": [
          "DataProcessing",
          "Asset",
          "Actor",
          "Area"
        ],
        "type": "string"
      },
      "RiskResponseType": {
        "enum": [
          "Reduce",
          "Acceptance",
          "Avoidance",
          "Transference",
          "TakeRisks"
        ],
        "type": "string",
        "description": "https://www.projectengineer.net/5-risk-response-strategies/"
      },
      "RiskScaleValue": {
        "type": "object",
        "properties": {
          "value": {
            "maximum": 9,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "maxLength": 250,
            "type": "string",
            "description": "Text label to uses",
            "nullable": true
          },
          "description": {
            "maxLength": 450,
            "type": "string",
            "nullable": true
          },
          "riskValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A value of the displayed scale"
      },
      "RiskSettingsCreationDto": {
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 120,
            "type": "string",
            "nullable": true
          },
          "template": {
            "$ref": "#/components/schemas/RiskSettingsTemplate"
          }
        },
        "additionalProperties": false
      },
      "RiskSettingsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 120,
            "type": "string",
            "description": "Label of the settings",
            "nullable": true
          },
          "selected": {
            "type": "boolean"
          },
          "builtIn": {
            "type": "boolean"
          },
          "impactUnit": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "probabilityUnit": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "maxValue": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "matrixColors": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Matrix colors \r\n[\r\n  [\"#123456\", \"#123456\", \"#123456\"]\r\n]",
            "nullable": true
          },
          "impactScales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskScaleValue"
            },
            "nullable": true
          },
          "probabilityScales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskScaleValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Risk scale dto"
      },
      "RiskSettingsTemplate": {
        "enum": [
          "Default",
          "CnilPia",
          "Tiny"
        ],
        "type": "string"
      },
      "RiskThreatDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "maxLength": 250,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          }
        },
        "additionalProperties": false
      },
      "RiskTypeDto": {
        "required": [
          "label",
          "ref"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ref": {
            "maxLength": 20,
            "type": "string"
          },
          "label": {
            "maxLength": 250,
            "type": "string"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "category": {
            "$ref": "#/components/schemas/RiskCategoryDto"
          },
          "categoryId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "description": {
            "maxLength": 3500,
            "type": "string",
            "nullable": true
          },
          "threatDescription": {
            "type": "string",
            "nullable": true
          },
          "sourceDescription": {
            "type": "string",
            "nullable": true
          },
          "impactInitial": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "probabilityInitial": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "impactResidual": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "probabilityResidual": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "controlPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ControlPointLightDto"
            },
            "nullable": true
          },
          "threats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskThreatDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a risk category"
      },
      "RiskTypeDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskTypeDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RoleDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "isLocked": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of permissions",
            "nullable": true
          },
          "nbUsers": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "The user role name and label"
      },
      "RowLevel": {
        "enum": [
          "Section",
          "SubSection",
          "Question"
        ],
        "type": "string"
      },
      "SafeGuardType": {
        "enum": [
          "EUStandardContractualClause",
          "BindingCorporateRules",
          "PrivacyShield",
          "AdequatCountry",
          "Derogation",
          "None",
          "Other",
          "EUStandard"
        ],
        "type": "string"
      },
      "ScoreOutput": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "percentage": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SectionType": {
        "enum": [
          "Default",
          "Chapter",
          "Disclaimer"
        ],
        "type": "string"
      },
      "SecurityMeasureDataTreatmentDto": {
        "required": [
          "label",
          "type"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "$ref": "#/components/schemas/SecurityMeasureState"
          },
          "descriptionHtml": {
            "type": "string",
            "nullable": true
          },
          "readonly": {
            "type": "boolean"
          },
          "purposes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SecurityMeasureType"
          },
          "description": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "relatedRisk": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "moreDetailsUrl": {
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          },
          "creatorUser": {
            "$ref": "#/components/schemas/UserLightDto"
          }
        },
        "additionalProperties": false
      },
      "SecurityMeasureDto": {
        "required": [
          "label",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SecurityMeasureType"
          },
          "description": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "relatedRisk": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "moreDetailsUrl": {
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          },
          "creatorUser": {
            "$ref": "#/components/schemas/UserLightDto"
          }
        },
        "additionalProperties": false
      },
      "SecurityMeasureState": {
        "enum": [
          "None",
          "Todo",
          "Planned",
          "Deploying",
          "Done"
        ],
        "type": "string"
      },
      "SecurityMeasureTableDto": {
        "required": [
          "label",
          "type"
        ],
        "type": "object",
        "properties": {
          "dataProcessings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProcessingLightDto"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "maxLength": 150,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SecurityMeasureType"
          },
          "description": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "relatedRisk": {
            "maxLength": 3000,
            "type": "string",
            "nullable": true
          },
          "moreDetailsUrl": {
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "nullable": true
          },
          "creatorUser": {
            "$ref": "#/components/schemas/UserLightDto"
          }
        },
        "additionalProperties": false
      },
      "SecurityMeasureTableDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityMeasureTableDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SecurityMeasureType": {
        "enum": [
          "Technical",
          "Organizational",
          "Physical"
        ],
        "type": "string"
      },
      "SelectListGroup": {
        "type": "object",
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SelectListItemResource": {
        "type": "object",
        "properties": {
          "headline": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "valueText": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "requireFeature": {
            "type": "string",
            "nullable": true
          },
          "nbReferences": {
            "type": "integer",
            "format": "int64"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "workspaceId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "valueId": {
            "type": "integer",
            "format": "int32"
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "disabled": {
            "type": "boolean"
          },
          "group": {
            "$ref": "#/components/schemas/SelectListGroup"
          },
          "selected": {
            "type": "boolean"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SelectListItemResourcePagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectListItemResource"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SelectType": {
        "enum": [
          "Undefined",
          "Default",
          "SingleSelector",
          "ArraySelector"
        ],
        "type": "string"
      },
      "SensitiveDataFieldLegalJustification": {
        "enum": [
          "ExplicitConsent",
          "NecessaryPurpose",
          "VitalInterest",
          "PoliticalLegitimateActivity",
          "ManifestlyPublic",
          "DefenseOfLegalClaims",
          "SubstantialPublicInterest",
          "Medicine",
          "PublicHealth",
          "StatisticResearch",
          "Other"
        ],
        "type": "string"
      },
      "SerieValue": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "nullable": true
          },
          "nb": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetIdentityValidationDto": {
        "type": "object",
        "properties": {
          "validation": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "StatSerie": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatSerieValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StatSerieValue": {
        "type": "object",
        "properties": {
          "y": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "stripePaymentId": {
            "type": "string",
            "description": "Stripe payment id",
            "nullable": true
          },
          "stripeCustomerId": {
            "type": "string",
            "nullable": true
          },
          "stripeSubscriptionId": {
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "trialStart": {
            "type": "string",
            "description": "Start of free trial period",
            "format": "date-time",
            "nullable": true
          },
          "trialEnd": {
            "type": "string",
            "description": "End of the trial period",
            "format": "date-time",
            "nullable": true
          },
          "subscriptionStart": {
            "type": "string",
            "description": "Start date of the paid subscription",
            "format": "date-time",
            "nullable": true
          },
          "subscriptionEnd": {
            "type": "string",
            "description": "End date of the paid subscription",
            "format": "date-time",
            "nullable": true
          },
          "unsubscriptionDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "trialRemainingDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "subscriptionRemainingDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "pricingPlanId": {
            "type": "integer",
            "format": "int32"
          },
          "pricingPlan": {
            "$ref": "#/components/schemas/PricingPlan"
          },
          "hasTrial": {
            "type": "boolean",
            "readOnly": true
          },
          "subscriptionValid": {
            "type": "boolean",
            "readOnly": true
          },
          "isInTrial": {
            "type": "boolean",
            "readOnly": true
          },
          "hasPaidSubscription": {
            "type": "boolean",
            "readOnly": true
          },
          "billingType": {
            "$ref": "#/components/schemas/BillingType"
          },
          "monthlyPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "workspaceCredit": {
            "type": "integer",
            "description": "Number of entity",
            "format": "int32"
          },
          "userCredit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mbytesAttachmentCredit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "logCredit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cookieWidgetCredit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "legalClaimWidgetCredit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dataProcessingCredit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "workflowRuleCredit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "customFieldCredit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cookieWidget": {
            "type": "boolean",
            "nullable": true
          },
          "cartography": {
            "type": "boolean",
            "nullable": true
          },
          "dataSubject": {
            "type": "boolean",
            "nullable": true
          },
          "dataBreach": {
            "type": "boolean",
            "nullable": true
          },
          "riskManagement": {
            "type": "boolean",
            "nullable": true
          },
          "documentGeneration": {
            "type": "boolean",
            "nullable": true
          },
          "audit": {
            "type": "boolean",
            "nullable": true
          },
          "advancedPersonalization": {
            "type": "boolean",
            "nullable": true
          },
          "advancedSecurity": {
            "type": "boolean",
            "description": "Ip Filtering + Authentification forte",
            "nullable": true
          },
          "sso": {
            "type": "boolean",
            "nullable": true
          },
          "record": {
            "type": "boolean",
            "nullable": true
          },
          "taskManagement": {
            "type": "boolean",
            "nullable": true
          },
          "fileManagement": {
            "type": "boolean",
            "nullable": true
          },
          "auditExport": {
            "type": "boolean",
            "nullable": true
          },
          "recordExport": {
            "type": "boolean",
            "nullable": true
          },
          "workflow": {
            "type": "boolean",
            "nullable": true
          },
          "customField": {
            "type": "boolean",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SupportType": {
        "enum": [
          "InHouse",
          "OutSourced"
        ],
        "type": "string"
      },
      "TagDto": {
        "required": [
          "label",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "maxLength": 360,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TagType"
          },
          "color": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagType": {
        "enum": [
          "DataProcessing",
          "DataSubject",
          "DataBreach",
          "Task",
          "Actor",
          "SecurityMeasure",
          "Asset",
          "Risk",
          "DataRetentionRule",
          "AuditTemplate"
        ],
        "type": "string",
        "description": "Type of tags"
      },
      "TaskCounter": {
        "type": "object",
        "properties": {
          "objectId": {
            "type": "string",
            "nullable": true
          },
          "opened": {
            "type": "integer",
            "format": "int32"
          },
          "closed": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TaskCreateUpdateDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "archived": {
            "type": "boolean"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "iterationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "label": {
            "maxLength": 120,
            "type": "string",
            "description": "Action label"
          },
          "descriptionHtml": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "objectId": {
            "type": "string",
            "description": "Object id",
            "nullable": true
          },
          "objectType": {
            "$ref": "#/components/schemas/TaskObjectType"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "state": {
            "$ref": "#/components/schemas/TaskState"
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "workFlowStepId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "description": "Dead line",
            "format": "date-time",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "description": "Associated tags with colors",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "description": "Associated tags with colors",
            "nullable": true
          },
          "ownerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "assignedToUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "workspaceId": {
            "type": "integer",
            "format": "int32"
          },
          "dateClosed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateActivated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "additionalDatas": {
            "type": "object",
            "additionalProperties": { },
            "description": "AdditionalData props",
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "project": {
            "$ref": "#/components/schemas/ProjectDto"
          },
          "iteration": {
            "$ref": "#/components/schemas/IterationDto"
          },
          "descriptionPlainText": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "workFlowStep": {
            "$ref": "#/components/schemas/WorkFlowStepDto"
          },
          "order": {
            "type": "integer",
            "format": "int64"
          },
          "owner": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "assignedToUser": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "area": {
            "$ref": "#/components/schemas/AreaLightDto"
          },
          "workSpace": {
            "$ref": "#/components/schemas/WorkSpaceDto"
          },
          "creator": {
            "$ref": "#/components/schemas/UserLightDto"
          },
          "remainingDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "closingTime": {
            "type": "integer",
            "description": "Action label",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskDto"
            },
            "nullable": true
          },
          "nbSubTasks": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "nbSubTasksClosed": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "objectTypeDetails": {
            "$ref": "#/components/schemas/SelectListItemResource"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "archived": {
            "type": "boolean"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "iterationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "label": {
            "maxLength": 120,
            "type": "string",
            "description": "Action label"
          },
          "descriptionHtml": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "objectId": {
            "type": "string",
            "description": "Object id",
            "nullable": true
          },
          "objectType": {
            "$ref": "#/components/schemas/TaskObjectType"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "state": {
            "$ref": "#/components/schemas/TaskState"
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "workFlowStepId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deadline": {
            "type": "string",
            "description": "Dead line",
            "format": "date-time",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentDto"
            },
            "description": "Associated tags with colors",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            },
            "description": "Associated tags with colors",
            "nullable": true
          },
          "ownerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "assignedToUserId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32"
          },
          "workspaceId": {
            "type": "integer",
            "format": "int32"
          },
          "dateClosed": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateActivated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "additionalDatas": {
            "type": "object",
            "additionalProperties": { },
            "description": "AdditionalData props",
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TaskExportQuery": {
        "type": "object",
        "properties": {
          "useNativeColumn": {
            "type": "boolean"
          },
          "cols": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "objectType": {
            "$ref": "#/components/schemas/TaskObjectType"
          },
          "objectIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "prios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Priority"
            },
            "nullable": true
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskState"
            },
            "nullable": true
          },
          "workflows": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "nullable": true
          },
          "iteration": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "q": {
            "type": "string",
            "nullable": true
          },
          "overtaking": {
            "type": "boolean"
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          },
          "excludeDone": {
            "type": "boolean"
          },
          "includeChildren": {
            "type": "boolean"
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "select": {
            "type": "string",
            "description": "Comma separated list of fields",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of the result page (default: 20, max 500)",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sortBy": {
            "type": "string",
            "description": "The field to sort",
            "nullable": true
          },
          "asc": {
            "type": "boolean",
            "description": "True to sort ascending"
          },
          "filters": {
            "type": "string",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskObjectType": {
        "enum": [
          "DataProcessing",
          "DataSubject",
          "DataBreach",
          "AuditResponse",
          "Actor",
          "Asset",
          "DataRetentionRule",
          "RiskEvaluation",
          "ControlPoint",
          "SecurityMeasure"
        ],
        "type": "string"
      },
      "TaskQuery": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "objectType": {
            "$ref": "#/components/schemas/TaskObjectType"
          },
          "objectIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "prios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Priority"
            },
            "nullable": true
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskState"
            },
            "nullable": true
          },
          "workflows": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "areaId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "nullable": true
          },
          "iteration": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "q": {
            "type": "string",
            "nullable": true
          },
          "overtaking": {
            "type": "boolean"
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          },
          "excludeDone": {
            "type": "boolean"
          },
          "includeChildren": {
            "type": "boolean"
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "select": {
            "type": "string",
            "description": "Comma separated list of fields",
            "nullable": true
          },
          "page": {
            "type": "integer",
            "description": "Pagination index (1 based, page 1 = 1, page 2 = 2...)",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "description": "Size of the result page (default: 20, max 500)",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sortBy": {
            "type": "string",
            "description": "The field to sort",
            "nullable": true
          },
          "asc": {
            "type": "boolean",
            "description": "True to sort ascending"
          },
          "filters": {
            "type": "string",
            "description": "A serialized as json filter string using the JsonRuleEngine.net format\r\nhttps://github.com/antoinebidault/JsonRuleEngine.Net\r\nThe filters is a query param, that's why he must be properly serialized as a json string and url encoded\r\ne.g. {\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}\r\nThe field prop must match one property name of the object (present in the output results)\r\nThe operator can be equal,\r\nnotEqual,\r\nlessThan,\r\nlessThanInclusive,\r\ngreaterThan,\r\ngreaterThanInclusive,\r\nin,\r\nnotIn,\r\ncontains,\r\ndoesNotContains,\r\nisNull,\r\nisNotNull,\r\nisEmpty\r\nYou can combine the filters as following : \r\n{ \"separator\":\"Or\",\"rules\": [{\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"},{\"field\":\"ProcessingType\", \"operator\":\"isNull\"}]}\r\nSerialize the filter param as following:\r\n?filters=${uriEncodeComponent(JSON.stringify({\"field\":\"ProcessingType\", \"operator\":\"notEqual\", \"value\": \"Done\"}))}",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskSerieValue": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "nullable": true
          },
          "nb": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskState": {
        "enum": [
          "Open",
          "Active",
          "Closed",
          "Archived"
        ],
        "type": "string"
      },
      "TaskStatsDto": {
        "type": "object",
        "properties": {
          "stats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskStatValueDto"
            },
            "nullable": true
          },
          "nbTaskTotal": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "workFlowSteps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskSerieValue"
            },
            "nullable": true,
            "readOnly": true
          },
          "cumulativeFlowChart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatSerie"
            },
            "nullable": true,
            "readOnly": true
          },
          "nbOpenedTasksUser": {
            "type": "integer",
            "format": "int32"
          },
          "nbActiveTasksUser": {
            "type": "integer",
            "format": "int32"
          },
          "nbOpenedTasks": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TaskStatValueDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "workFlowStep": {
            "$ref": "#/components/schemas/WorkFlowStepDto"
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "remainingDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          }
        },
        "additionalProperties": false
      },
      "TeamDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string"
          },
          "ref": {
            "maxLength": 80,
            "type": "string",
            "description": "Internal reference id (you can use it to",
            "nullable": true
          },
          "areas": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Areas in Team",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Users in team (list of id)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TeamItemDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string"
          },
          "ref": {
            "maxLength": 80,
            "type": "string",
            "description": "Internal reference id (you can use it to",
            "nullable": true
          },
          "default": {
            "type": "boolean"
          },
          "nbUsers": {
            "type": "integer",
            "description": "Users in team (list of id)",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TeamItemDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamItemDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TemplateExportActor": {
        "enum": [
          "Default"
        ],
        "type": "string"
      },
      "TemplateExportProcessing": {
        "enum": [
          "Default",
          "Article30",
          "NoticeInformation"
        ],
        "type": "string"
      },
      "TenantLightDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TransferDto": {
        "required": [
          "safeGuardType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "readonly": {
            "type": "boolean"
          },
          "countryCode": {
            "maxLength": 6,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "safeGuardType": {
            "$ref": "#/components/schemas/SafeGuardType"
          },
          "otherLabel": {
            "maxLength": 800,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransferExtendedDto": {
        "required": [
          "safeGuardType"
        ],
        "type": "object",
        "properties": {
          "isAdequateCountry": {
            "type": "boolean",
            "readOnly": true
          },
          "isEuropeanUnionCountry": {
            "type": "boolean",
            "readOnly": true
          },
          "entityOrigin": {
            "$ref": "#/components/schemas/AreaDto"
          },
          "recipient": {
            "$ref": "#/components/schemas/DataProcessingActorDto"
          },
          "dataProcessing": {
            "$ref": "#/components/schemas/DataProcessingLightDto"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "readonly": {
            "type": "boolean"
          },
          "countryCode": {
            "maxLength": 6,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "safeGuardType": {
            "$ref": "#/components/schemas/SafeGuardType"
          },
          "otherLabel": {
            "maxLength": 800,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TreeItemType": {
        "enum": [
          "Folder",
          "File"
        ],
        "type": "string"
      },
      "TutorialState": {
        "enum": [
          "InProgress",
          "Done",
          "Initial"
        ],
        "type": "string",
        "description": "State of progression in the tutorial"
      },
      "TutorialStateItem": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "$ref": "#/components/schemas/TutorialState"
          },
          "stepId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Tutorial's state and stepId stored"
      },
      "TypeQuery": {
        "enum": [
          "ExcludeAuditLog",
          "OnlyAuditLog",
          "All"
        ],
        "type": "string"
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/BaseRole"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 3,
            "type": "string",
            "nullable": true
          },
          "username": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "bio": {
            "maxLength": 4000,
            "type": "string",
            "nullable": true
          },
          "blogUrl": {
            "type": "string",
            "nullable": true
          },
          "isInvited": {
            "type": "boolean",
            "readOnly": true
          },
          "isOwner": {
            "type": "boolean"
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "dateCreation": {
            "type": "string",
            "format": "date-time"
          },
          "dateUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "invitations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvitationDto"
            },
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleDto"
            },
            "nullable": true
          },
          "adminPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminPermission"
            },
            "description": "Permissions for administrators",
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamDto"
            },
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "canReceiveNotification": {
            "type": "boolean"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "configuration": {
            "$ref": "#/components/schemas/UserSettingsDto"
          },
          "tenantOwnerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tenantOwner": {
            "$ref": "#/components/schemas/TenantLightDto"
          },
          "ssoConfigurationId": {
            "type": "string",
            "nullable": true
          },
          "twoFactorAuthEnabled": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "familyName": {
            "type": "string",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserDtoPagedList": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            },
            "nullable": true
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserLightDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "familyName": {
            "type": "string",
            "nullable": true
          },
          "givenName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "avatarUrl": {
            "type": "string",
            "nullable": true
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserSettingsDto": {
        "required": [
          "dateFormat"
        ],
        "type": "object",
        "properties": {
          "dateFormat": {
            "maxLength": 150,
            "type": "string"
          },
          "columnsConfiguration": {
            "type": "object",
            "properties": {
              "CustomerRequest": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "DataTreatment": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "IncidentReport": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "DataProcessing": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "UserRequest": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "DataBreach": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Vendor": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Application": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "User": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Task": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Dashboard": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "CookieConsent": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "DataField": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "DataRetentionRule": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Actor": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Risk": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "AuditTemplate": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "AuditResponse": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "SecurityMeasure": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "DataSubject": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ControlPoint": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "RiskAsset": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Area": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "Asset": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "RiskThreat": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "RiskEvent": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "nullable": true
          },
          "tutorialStates": {
            "type": "object",
            "properties": {
              "Startup": {
                "$ref": "#/components/schemas/TutorialStateItem"
              },
              "Dashboard": {
                "$ref": "#/components/schemas/TutorialStateItem"
              },
              "DataProcessing": {
                "$ref": "#/components/schemas/TutorialStateItem"
              },
              "DataSubject": {
                "$ref": "#/components/schemas/TutorialStateItem"
              },
              "DataBreach": {
                "$ref": "#/components/schemas/TutorialStateItem"
              },
              "CookieWidget": {
                "$ref": "#/components/schemas/TutorialStateItem"
              },
              "Risk": {
                "$ref": "#/components/schemas/TutorialStateItem"
              },
              "Area": {
                "$ref": "#/components/schemas/TutorialStateItem"
              }
            },
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Objet de configuration"
      },
      "VendorType": {
        "enum": [
          "B2B",
          "B2C"
        ],
        "type": "string"
      },
      "WebhookPayload": {
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "integer",
            "format": "int32"
          },
          "signatureUrl": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "eventType": {
            "$ref": "#/components/schemas/NotificationChannel"
          },
          "eventName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebHookUrlCreationDto": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "type": "string"
          },
          "workSpaceId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subscribedEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationChannel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebHookUrlDto": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "signatureKey": {
            "type": "string",
            "format": "uuid"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "nbErrors": {
            "type": "integer",
            "format": "int32"
          },
          "dateLastError": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "inError": {
            "type": "boolean"
          },
          "workSpace": {
            "$ref": "#/components/schemas/WorkSpaceDto"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "type": "string"
          },
          "workSpaceId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "subscribedEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationChannel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkFlowStepDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "maxLength": 120,
            "type": "string"
          },
          "color": {
            "maxLength": 9,
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "itemLimit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/WorkflowType"
          },
          "finalStep": {
            "type": "boolean"
          },
          "initialStep": {
            "type": "boolean",
            "readOnly": true
          },
          "descriptionHtml": {
            "maxLength": 3000,
            "type": "string",
            "description": "Notice",
            "nullable": true
          },
          "mappedState": {
            "maxLength": 50,
            "type": "string",
            "description": "The underlying state mapped \r\ne.g. New, Active...",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkflowType": {
        "enum": [
          "DataSubject",
          "DataBreach",
          "Task",
          "DataProcessing"
        ],
        "type": "string"
      },
      "WorkSpaceDto": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tenantId": {
            "type": "integer",
            "format": "int32"
          },
          "primaryColor": {
            "type": "string",
            "nullable": true
          },
          "secondaryColor": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/WorkSpaceState"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionWorkspaceDto"
            },
            "nullable": true
          },
          "dataSubjectArchivedRetentionDays": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "nbEntities": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WorkSpaceListDto": {
        "type": "object",
        "properties": {
          "pricingPlan": {
            "$ref": "#/components/schemas/PricingPlan"
          },
          "subscription": {
            "$ref": "#/components/schemas/Subscription"
          },
          "features": {
            "$ref": "#/components/schemas/Features"
          },
          "workSpaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkSpaceDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkSpaceState": {
        "enum": [
          "Active",
          "Archived",
          "Deleted"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "authorizationUrl": "https://account.dastra.eu/connect/authorize",
            "tokenUrl": "https://account.dastra.eu/connect/token",
            "scopes": {
              "api1": "Access database operations"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://account.dastra.eu/connect/authorize",
            "tokenUrl": "https://account.dastra.eu/connect/token",
            "scopes": {
              "api1": "Access operations",
              "offline_access": "Refresh token"
            }
          }
        }
      },
      "basic": {
        "type": "http",
        "description": "Basic Authorization header using the Authorization header's name as follow Authorization : BASIC {privatekey}:{privatekey}",
        "scheme": "basic"
      }
    }
  },
  "security": [
    {
      "oauth2": [
        "api1"
      ]
    },
    {
      "basic": [ ]
    }
  ]
}